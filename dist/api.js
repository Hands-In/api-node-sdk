"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Merchant API
 * The Hands In API is the first and only service that enables users to transact within a group. Our API is heavily orientated around being a RESTful service  that has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, ant utilizes standard HTTP response codes
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefundsApi = exports.RefundsApiFactory = exports.RefundsApiFp = exports.RefundsApiAxiosParamCreator = exports.PaymentsApi = exports.PaymentsApiFactory = exports.PaymentsApiFp = exports.PaymentsApiAxiosParamCreator = exports.OrdersApi = exports.OrdersApiFactory = exports.OrdersApiFp = exports.OrdersApiAxiosParamCreator = exports.MerchantConnectApi = exports.MerchantConnectApiFactory = exports.MerchantConnectApiFp = exports.MerchantConnectApiAxiosParamCreator = exports.MerchantApi = exports.MerchantApiFactory = exports.MerchantApiFp = exports.MerchantApiAxiosParamCreator = exports.ItemsApi = exports.ItemsApiFactory = exports.ItemsApiFp = exports.ItemsApiAxiosParamCreator = exports.GroupPaymentsApi = exports.GroupPaymentsApiFactory = exports.GroupPaymentsApiFp = exports.GroupPaymentsApiAxiosParamCreator = exports.EmailsApi = exports.EmailsApiFactory = exports.EmailsApiFp = exports.EmailsApiAxiosParamCreator = exports.CustomersApi = exports.CustomersApiFactory = exports.CustomersApiFp = exports.CustomersApiAxiosParamCreator = exports.CheckoutsApi = exports.CheckoutsApiFactory = exports.CheckoutsApiFp = exports.CheckoutsApiAxiosParamCreator = exports.AuthenticationApi = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiAxiosParamCreator = exports.AccountsApi = exports.AccountsApiFactory = exports.AccountsApiFp = exports.AccountsApiAxiosParamCreator = exports.SplitType = exports.Service = exports.RiskLevel = exports.RefundStatus = exports.PromptType = exports.PaymentStatus = exports.PaymentMethod = exports.OrderStatus = exports.OpenIdResponseType = exports.OpenIdIdTokenDataGenderEnum = exports.OAuthGrantType = exports.IETFResponseType = exports.DisputeStatus = exports.DisputeReason = exports.DisplayType = exports.Currency = exports.Country = exports.CheckoutStatus = exports.CardVerificationResult = exports.CardVerificationMethod = exports.CardBrand = exports.CaptureMethod = exports.CVVStatus = exports.AVSStatus = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.AVSStatus = {
    Accepted: 'AVS_ACCEPTED',
    Rejected: 'AVS_REJECTED',
    NotChecked: 'AVS_NOT_CHECKED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CVVStatus = {
    Accepted: 'CVV_ACCEPTED',
    Rejected: 'CVV_REJECTED',
    NotChecked: 'CVV_NOT_CHECKED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CaptureMethod = {
    Payment: 'PAYMENT',
    Capture: 'CAPTURE',
    Subscription: 'SUBSCRIPTION'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CardBrand = {
    OtherBrand: 'OTHER_BRAND',
    Visa: 'VISA',
    Mastercard: 'MASTERCARD',
    AmericanExpress: 'AMERICAN_EXPRESS',
    Discover: 'DISCOVER',
    DiscoverDiners: 'DISCOVER_DINERS',
    Jcb: 'JCB',
    ChinaUnionpay: 'CHINA_UNIONPAY',
    SquareGiftCard: 'SQUARE_GIFT_CARD',
    SquareCapitalCard: 'SQUARE_CAPITAL_CARD',
    Interac: 'INTERAC',
    Eftpos: 'EFTPOS',
    Felica: 'FELICA',
    Ebt: 'EBT'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CardVerificationMethod = {
    Pin: 'PIN',
    PinAndSignature: 'PIN_AND_SIGNATURE',
    Signature: 'SIGNATURE',
    OnDevice: 'ON_DEVICE',
    None: 'NONE'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CardVerificationResult = {
    Success: 'SUCCESS',
    Failure: 'FAILURE',
    Unknown: 'UNKNOWN'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CheckoutStatus = {
    Expired: 'EXPIRED',
    Cancelled: 'CANCELLED',
    Pending: 'PENDING'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Country = {
    Af: 'AF',
    Ax: 'AX',
    Al: 'AL',
    Dz: 'DZ',
    As: 'AS',
    Ad: 'AD',
    Ao: 'AO',
    Ai: 'AI',
    Aq: 'AQ',
    Ag: 'AG',
    Ar: 'AR',
    Am: 'AM',
    Aw: 'AW',
    Au: 'AU',
    At: 'AT',
    Az: 'AZ',
    Bs: 'BS',
    Bh: 'BH',
    Bd: 'BD',
    Bb: 'BB',
    By: 'BY',
    Be: 'BE',
    Bz: 'BZ',
    Bj: 'BJ',
    Bm: 'BM',
    Bt: 'BT',
    Bo: 'BO',
    Bq: 'BQ',
    Ba: 'BA',
    Bw: 'BW',
    Bv: 'BV',
    Br: 'BR',
    Io: 'IO',
    Bn: 'BN',
    Bg: 'BG',
    Bf: 'BF',
    Bi: 'BI',
    Kh: 'KH',
    Cm: 'CM',
    Ca: 'CA',
    Cv: 'CV',
    Ky: 'KY',
    Cf: 'CF',
    Td: 'TD',
    Cl: 'CL',
    Cn: 'CN',
    Cx: 'CX',
    Cc: 'CC',
    Co: 'CO',
    Km: 'KM',
    Cg: 'CG',
    Cd: 'CD',
    Ck: 'CK',
    Cr: 'CR',
    Ci: 'CI',
    Hr: 'HR',
    Cu: 'CU',
    Cw: 'CW',
    Cy: 'CY',
    Cz: 'CZ',
    Dk: 'DK',
    Dj: 'DJ',
    Dm: 'DM',
    Do: 'DO',
    Ec: 'EC',
    Eg: 'EG',
    Sv: 'SV',
    Gq: 'GQ',
    Er: 'ER',
    Ee: 'EE',
    Et: 'ET',
    Fk: 'FK',
    Fo: 'FO',
    Fj: 'FJ',
    Fi: 'FI',
    Fr: 'FR',
    Gf: 'GF',
    Pf: 'PF',
    Tf: 'TF',
    Ga: 'GA',
    Gm: 'GM',
    Ge: 'GE',
    De: 'DE',
    Gh: 'GH',
    Gi: 'GI',
    Gr: 'GR',
    Gl: 'GL',
    Gd: 'GD',
    Gp: 'GP',
    Gu: 'GU',
    Gt: 'GT',
    Gg: 'GG',
    Gn: 'GN',
    Gw: 'GW',
    Gy: 'GY',
    Ht: 'HT',
    Hm: 'HM',
    Va: 'VA',
    Hn: 'HN',
    Hk: 'HK',
    Hu: 'HU',
    Is: 'IS',
    In: 'IN',
    Id: 'ID',
    Ir: 'IR',
    Iq: 'IQ',
    Ie: 'IE',
    Im: 'IM',
    Il: 'IL',
    It: 'IT',
    Jm: 'JM',
    Jp: 'JP',
    Je: 'JE',
    Jo: 'JO',
    Kz: 'KZ',
    Ke: 'KE',
    Ki: 'KI',
    Kr: 'KR',
    Kp: 'KP',
    Kw: 'KW',
    Kg: 'KG',
    La: 'LA',
    Lv: 'LV',
    Lb: 'LB',
    Ls: 'LS',
    Lr: 'LR',
    Ly: 'LY',
    Li: 'LI',
    Lt: 'LT',
    Lu: 'LU',
    Mo: 'MO',
    Mk: 'MK',
    Mg: 'MG',
    Mw: 'MW',
    My: 'MY',
    Mv: 'MV',
    Ml: 'ML',
    Mt: 'MT',
    Mh: 'MH',
    Mq: 'MQ',
    Mr: 'MR',
    Mu: 'MU',
    Yt: 'YT',
    Mx: 'MX',
    Fm: 'FM',
    Md: 'MD',
    Mc: 'MC',
    Mn: 'MN',
    Me: 'ME',
    Ms: 'MS',
    Ma: 'MA',
    Mz: 'MZ',
    Mm: 'MM',
    Na: 'NA',
    Nr: 'NR',
    Np: 'NP',
    Nl: 'NL',
    Nc: 'NC',
    Nz: 'NZ',
    Ni: 'NI',
    Ne: 'NE',
    Ng: 'NG',
    Nu: 'NU',
    Nf: 'NF',
    Mp: 'MP',
    False: 'false',
    Om: 'OM',
    Pk: 'PK',
    Pw: 'PW',
    Ps: 'PS',
    Pa: 'PA',
    Pg: 'PG',
    Py: 'PY',
    Pe: 'PE',
    Ph: 'PH',
    Pn: 'PN',
    Pl: 'PL',
    Pt: 'PT',
    Pr: 'PR',
    Qa: 'QA',
    Re: 'RE',
    Ro: 'RO',
    Ru: 'RU',
    Rw: 'RW',
    Bl: 'BL',
    Sh: 'SH',
    Kn: 'KN',
    Lc: 'LC',
    Mf: 'MF',
    Pm: 'PM',
    Vc: 'VC',
    Ws: 'WS',
    Sm: 'SM',
    St: 'ST',
    Sa: 'SA',
    Sn: 'SN',
    Rs: 'RS',
    Sc: 'SC',
    Sl: 'SL',
    Sg: 'SG',
    Sx: 'SX',
    Sk: 'SK',
    Si: 'SI',
    Sb: 'SB',
    So: 'SO',
    Za: 'ZA',
    Gs: 'GS',
    Ss: 'SS',
    Es: 'ES',
    Lk: 'LK',
    Sd: 'SD',
    Sr: 'SR',
    Sj: 'SJ',
    Sz: 'SZ',
    Se: 'SE',
    Ch: 'CH',
    Sy: 'SY',
    Tw: 'TW',
    Tj: 'TJ',
    Tz: 'TZ',
    Th: 'TH',
    Tl: 'TL',
    Tg: 'TG',
    Tk: 'TK',
    To: 'TO',
    Tt: 'TT',
    Tn: 'TN',
    Tr: 'TR',
    Tm: 'TM',
    Tc: 'TC',
    Tv: 'TV',
    Ug: 'UG',
    Ua: 'UA',
    Ae: 'AE',
    Gb: 'GB',
    Us: 'US',
    Um: 'UM',
    Uy: 'UY',
    Uz: 'UZ',
    Vu: 'VU',
    Ve: 'VE',
    Vn: 'VN',
    Vg: 'VG',
    Vi: 'VI',
    Wf: 'WF',
    Eh: 'EH',
    Ye: 'YE',
    Zm: 'ZM',
    Zw: 'ZW'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Currency = {
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ang: 'ANG',
    Aoa: 'AOA',
    Ars: 'ARS',
    Aud: 'AUD',
    Awg: 'AWG',
    Azn: 'AZN',
    Bam: 'BAM',
    Bbd: 'BBD',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bmd: 'BMD',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bsd: 'BSD',
    Btn: 'BTN',
    Bwp: 'BWP',
    Byn: 'BYN',
    Bzd: 'BZD',
    Cad: 'CAD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cuc: 'CUC',
    Cup: 'CUP',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Eur: 'EUR',
    Fjd: 'FJD',
    Fkp: 'FKP',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ghs: 'GHS',
    Gip: 'GIP',
    Gmd: 'GMD',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Gyd: 'GYD',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Htg: 'HTG',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Kgs: 'KGS',
    Khr: 'KHR',
    Kmf: 'KMF',
    Kpw: 'KPW',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kyd: 'KYD',
    Kzt: 'KZT',
    Lak: 'LAK',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Lrd: 'LRD',
    Lsl: 'LSL',
    Lyd: 'LYD',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mnt: 'MNT',
    Mop: 'MOP',
    Mru: 'MRU',
    Mur: 'MUR',
    Mvr: 'MVR',
    Mwk: 'MWK',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Pgk: 'PGK',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sbd: 'SBD',
    Scr: 'SCR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Shp: 'SHP',
    Sll: 'SLL',
    Sos: 'SOS',
    Srd: 'SRD',
    Ssp: 'SSP',
    Stn: 'STN',
    Svc: 'SVC',
    Syp: 'SYP',
    Szl: 'SZL',
    Thb: 'THB',
    Tjs: 'TJS',
    Tmt: 'TMT',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Usd: 'USD',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Ves: 'VES',
    Vnd: 'VND',
    Vuv: 'VUV',
    Wst: 'WST',
    Xaf: 'XAF',
    Xcd: 'XCD',
    Xof: 'XOF',
    Xpf: 'XPF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmw: 'ZMW',
    Zwl: 'ZWL'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.DisplayType = {
    Page: 'page',
    Popup: 'popup',
    Touch: 'touch',
    Wap: 'wap'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.DisputeReason = {
    AmountDiffers: 'AMOUNT_DIFFERS',
    Cancelled: 'CANCELLED',
    Duplicate: 'DUPLICATE',
    NoKnowledge: 'NO_KNOWLEDGE',
    NotAsDescribed: 'NOT_AS_DESCRIBED',
    NotReceived: 'NOT_RECEIVED',
    PaidByOtherMeans: 'PAID_BY_OTHER_MEANS',
    CustomerRequestsCredit: 'CUSTOMER_REQUESTS_CREDIT',
    EmvLiabilityShift: 'EMV_LIABILITY_SHIFT'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.DisputeStatus = {
    Unknown: 'UNKNOWN',
    InquiryEvidenceRequired: 'INQUIRY_EVIDENCE_REQUIRED',
    InquiryProcessing: 'INQUIRY_PROCESSING',
    InquiryClosed: 'INQUIRY_CLOSED',
    EvidenceRequired: 'EVIDENCE_REQUIRED',
    Processing: 'PROCESSING',
    Won: 'WON',
    Lost: 'LOST',
    Accepted: 'ACCEPTED',
    WaitingThirdParty: 'WAITING_THIRD_PARTY'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.IETFResponseType = {
    Code: 'code',
    Token: 'token'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.OAuthGrantType = {
    AuthorizationCode: 'authorization_code',
    RefreshToken: 'refresh_token',
    ClientCredentials: 'client_credentials'
};
exports.OpenIdIdTokenDataGenderEnum = {
    Female: 'female',
    Male: 'male'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.OpenIdResponseType = {
    IdToken: 'id_token',
    IdTokenToken: 'id_token token',
    CodeIdTokenToken: 'code id_token token',
    CodeIdToken: 'code id_token',
    CodeToken: 'code token',
    None: 'none'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.OrderStatus = {
    Pending: 'PENDING',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED',
    Fulfilled: 'FULFILLED',
    Returned: 'RETURNED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PaymentMethod = {
    Card: 'CARD',
    BankAccount: 'BANK_ACCOUNT',
    Cash: 'CASH',
    External: 'EXTERNAL'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PaymentStatus = {
    Approved: 'APPROVED',
    Pending: 'PENDING',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED',
    Failed: 'FAILED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PromptType = {
    Consent: 'consent',
    SelectAccount: 'select_account',
    Login: 'login',
    None: 'none'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.RefundStatus = {
    Pending: 'PENDING',
    Completed: 'COMPLETED',
    Rejected: 'REJECTED',
    Failed: 'FAILED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.RiskLevel = {
    Low: 'LOW',
    Moderate: 'MODERATE',
    High: 'HIGH'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Service = {
    Square: 'square',
    Stripe: 'stripe'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.SplitType = {
    Equal: 'EQUAL',
    ByItem: 'BY_ITEM',
    Custom: 'CUSTOM'
};
/**
 * AccountsApi - axios parameter creator
 * @export
 */
exports.AccountsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Supply an account JWT access token and delete the associated profile from it
         * @summary Delete an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/accounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a Hands In account by supplying the necessary details
         * @summary Create an account
         * @param {AccountCreationParams} accountCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (accountCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'accountCreationParams' is not null or undefined
                    common_1.assertParamExists('create', 'accountCreationParams', accountCreationParams);
                    localVarPath = "/accounts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountCreationParams, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Supply an account JWT access token and receive all profile data stored by Hands In
         * @summary Retrieve account profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/accounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply an account JWT access token and retrieve the all the applications that are connected to this account
         * @summary List connected account applications
         * @param {string} [appName]
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: function (appName, pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/accounts/applications";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (appName !== undefined) {
                                localVarQueryParameter['appName'] = appName;
                            }
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
exports.AccountsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AccountsApiAxiosParamCreator(configuration);
    return {
        /**
         * Supply an account JWT access token and delete the associated profile from it
         * @summary Delete an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator._delete(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create a Hands In account by supplying the necessary details
         * @summary Create an account
         * @param {AccountCreationParams} accountCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (accountCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.create(accountCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply an account JWT access token and receive all profile data stored by Hands In
         * @summary Retrieve account profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProfile(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply an account JWT access token and retrieve the all the applications that are connected to this account
         * @summary List connected account applications
         * @param {string} [appName]
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: function (appName, pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listApplications(appName, pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * AccountsApi - factory interface
 * @export
 */
exports.AccountsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AccountsApiFp(configuration);
    return {
        /**
         * Supply an account JWT access token and delete the associated profile from it
         * @summary Delete an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (options) {
            return localVarFp._delete(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a Hands In account by supplying the necessary details
         * @summary Create an account
         * @param {AccountCreationParams} accountCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (accountCreationParams, options) {
            return localVarFp.create(accountCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply an account JWT access token and receive all profile data stored by Hands In
         * @summary Retrieve account profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: function (options) {
            return localVarFp.getProfile(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply an account JWT access token and retrieve the all the applications that are connected to this account
         * @summary List connected account applications
         * @param {string} [appName]
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: function (appName, pageNum, pageSize, limit, options) {
            return localVarFp.listApplications(appName, pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
var AccountsApi = /** @class */ (function (_super) {
    __extends(AccountsApi, _super);
    function AccountsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Supply an account JWT access token and delete the associated profile from it
     * @summary Delete an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype._delete = function (options) {
        var _this = this;
        return exports.AccountsApiFp(this.configuration)._delete(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a Hands In account by supplying the necessary details
     * @summary Create an account
     * @param {AccountCreationParams} accountCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.create = function (accountCreationParams, options) {
        var _this = this;
        return exports.AccountsApiFp(this.configuration).create(accountCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply an account JWT access token and receive all profile data stored by Hands In
     * @summary Retrieve account profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.getProfile = function (options) {
        var _this = this;
        return exports.AccountsApiFp(this.configuration).getProfile(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply an account JWT access token and retrieve the all the applications that are connected to this account
     * @summary List connected account applications
     * @param {string} [appName]
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    AccountsApi.prototype.listApplications = function (appName, pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.AccountsApiFp(this.configuration).listApplications(appName, pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccountsApi;
}(base_1.BaseAPI));
exports.AccountsApi = AccountsApi;
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
exports.AuthenticationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
         * @summary Login to your Hands In account
         * @param {LoginParams} loginParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (loginParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'loginParams' is not null or undefined
                    common_1.assertParamExists('login', 'loginParams', loginParams);
                    localVarPath = "/authentication/login";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(loginParams, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Requesting a password reset will email a link to the account enabling them to reset their password
         * @summary Create a reset password request
         * @param {RequestResetParams} requestResetParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordReset: function (requestResetParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'requestResetParams' is not null or undefined
                    common_1.assertParamExists('requestPasswordReset', 'requestResetParams', requestResetParams);
                    localVarPath = "/authentication/request-reset";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestResetParams, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Reset account password
         * @summary Reset password
         * @param {string} resetToken
         * @param {PasswordResetParams} passwordResetParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: function (resetToken, passwordResetParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'resetToken' is not null or undefined
                    common_1.assertParamExists('resetPassword', 'resetToken', resetToken);
                    // verify required parameter 'passwordResetParams' is not null or undefined
                    common_1.assertParamExists('resetPassword', 'passwordResetParams', passwordResetParams);
                    localVarPath = "/authentication/reset";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (resetToken !== undefined) {
                        localVarQueryParameter['resetToken'] = resetToken;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(passwordResetParams, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
exports.AuthenticationApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.AuthenticationApiAxiosParamCreator(configuration);
    return {
        /**
         * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
         * @summary Login to your Hands In account
         * @param {LoginParams} loginParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (loginParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.login(loginParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Requesting a password reset will email a link to the account enabling them to reset their password
         * @summary Create a reset password request
         * @param {RequestResetParams} requestResetParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordReset: function (requestResetParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.requestPasswordReset(requestResetParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Reset account password
         * @summary Reset password
         * @param {string} resetToken
         * @param {PasswordResetParams} passwordResetParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: function (resetToken, passwordResetParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resetPassword(resetToken, passwordResetParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
exports.AuthenticationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.AuthenticationApiFp(configuration);
    return {
        /**
         * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
         * @summary Login to your Hands In account
         * @param {LoginParams} loginParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (loginParams, options) {
            return localVarFp.login(loginParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Requesting a password reset will email a link to the account enabling them to reset their password
         * @summary Create a reset password request
         * @param {RequestResetParams} requestResetParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordReset: function (requestResetParams, options) {
            return localVarFp.requestPasswordReset(requestResetParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Reset account password
         * @summary Reset password
         * @param {string} resetToken
         * @param {PasswordResetParams} passwordResetParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: function (resetToken, passwordResetParams, options) {
            return localVarFp.resetPassword(resetToken, passwordResetParams, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
var AuthenticationApi = /** @class */ (function (_super) {
    __extends(AuthenticationApi, _super);
    function AuthenticationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
     * @summary Login to your Hands In account
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    AuthenticationApi.prototype.login = function (loginParams, options) {
        var _this = this;
        return exports.AuthenticationApiFp(this.configuration).login(loginParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Requesting a password reset will email a link to the account enabling them to reset their password
     * @summary Create a reset password request
     * @param {RequestResetParams} requestResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    AuthenticationApi.prototype.requestPasswordReset = function (requestResetParams, options) {
        var _this = this;
        return exports.AuthenticationApiFp(this.configuration).requestPasswordReset(requestResetParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Reset account password
     * @summary Reset password
     * @param {string} resetToken
     * @param {PasswordResetParams} passwordResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    AuthenticationApi.prototype.resetPassword = function (resetToken, passwordResetParams, options) {
        var _this = this;
        return exports.AuthenticationApiFp(this.configuration).resetPassword(resetToken, passwordResetParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthenticationApi;
}(base_1.BaseAPI));
exports.AuthenticationApi = AuthenticationApi;
/**
 * CheckoutsApi - axios parameter creator
 * @export
 */
exports.CheckoutsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
         * @summary Create a checkout session
         * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckout: function (checkoutSessionCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'checkoutSessionCreationParams' is not null or undefined
                            common_1.assertParamExists('createCheckout', 'checkoutSessionCreationParams', checkoutSessionCreationParams);
                            localVarPath = "/checkouts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(checkoutSessionCreationParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply the unique dispute ID and receive corresponding checkout details.
         * @summary Retrieve a checkout session
         * @param {string} checkoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckout: function (checkoutId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'checkoutId' is not null or undefined
                            common_1.assertParamExists('getCheckout', 'checkoutId', checkoutId);
                            localVarPath = "/checkouts/{checkoutId}"
                                .replace("{" + "checkoutId" + "}", encodeURIComponent(String(checkoutId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a list of checkout sessions by supplying the correct parameters.
         * @summary List all checkout sessions
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCheckouts: function (pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/checkouts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a checkout session by supplying the correct parameters.
         * @summary Update a checkout session
         * @param {string} checkoutId
         * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckout: function (checkoutId, checkoutSessionCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'checkoutId' is not null or undefined
                            common_1.assertParamExists('updateCheckout', 'checkoutId', checkoutId);
                            // verify required parameter 'checkoutSessionCreationParams' is not null or undefined
                            common_1.assertParamExists('updateCheckout', 'checkoutSessionCreationParams', checkoutSessionCreationParams);
                            localVarPath = "/checkouts/{checkoutId}"
                                .replace("{" + "checkoutId" + "}", encodeURIComponent(String(checkoutId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(checkoutSessionCreationParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CheckoutsApi - functional programming interface
 * @export
 */
exports.CheckoutsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CheckoutsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
         * @summary Create a checkout session
         * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckout: function (checkoutSessionCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCheckout(checkoutSessionCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply the unique dispute ID and receive corresponding checkout details.
         * @summary Retrieve a checkout session
         * @param {string} checkoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckout: function (checkoutId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCheckout(checkoutId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a list of checkout sessions by supplying the correct parameters.
         * @summary List all checkout sessions
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCheckouts: function (pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCheckouts(pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a checkout session by supplying the correct parameters.
         * @summary Update a checkout session
         * @param {string} checkoutId
         * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckout: function (checkoutId, checkoutSessionCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCheckout(checkoutId, checkoutSessionCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CheckoutsApi - factory interface
 * @export
 */
exports.CheckoutsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CheckoutsApiFp(configuration);
    return {
        /**
         * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
         * @summary Create a checkout session
         * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckout: function (checkoutSessionCreationParams, options) {
            return localVarFp.createCheckout(checkoutSessionCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply the unique dispute ID and receive corresponding checkout details.
         * @summary Retrieve a checkout session
         * @param {string} checkoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckout: function (checkoutId, options) {
            return localVarFp.getCheckout(checkoutId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a list of checkout sessions by supplying the correct parameters.
         * @summary List all checkout sessions
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCheckouts: function (pageNum, pageSize, limit, options) {
            return localVarFp.listCheckouts(pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a checkout session by supplying the correct parameters.
         * @summary Update a checkout session
         * @param {string} checkoutId
         * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckout: function (checkoutId, checkoutSessionCreationParams, options) {
            return localVarFp.updateCheckout(checkoutId, checkoutSessionCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CheckoutsApi - object-oriented interface
 * @export
 * @class CheckoutsApi
 * @extends {BaseAPI}
 */
var CheckoutsApi = /** @class */ (function (_super) {
    __extends(CheckoutsApi, _super);
    function CheckoutsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    CheckoutsApi.prototype.createCheckout = function (checkoutSessionCreationParams, options) {
        var _this = this;
        return exports.CheckoutsApiFp(this.configuration).createCheckout(checkoutSessionCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply the unique dispute ID and receive corresponding checkout details.
     * @summary Retrieve a checkout session
     * @param {string} checkoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    CheckoutsApi.prototype.getCheckout = function (checkoutId, options) {
        var _this = this;
        return exports.CheckoutsApiFp(this.configuration).getCheckout(checkoutId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a list of checkout sessions by supplying the correct parameters.
     * @summary List all checkout sessions
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    CheckoutsApi.prototype.listCheckouts = function (pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.CheckoutsApiFp(this.configuration).listCheckouts(pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a checkout session by supplying the correct parameters.
     * @summary Update a checkout session
     * @param {string} checkoutId
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    CheckoutsApi.prototype.updateCheckout = function (checkoutId, checkoutSessionCreationParams, options) {
        var _this = this;
        return exports.CheckoutsApiFp(this.configuration).updateCheckout(checkoutId, checkoutSessionCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CheckoutsApi;
}(base_1.BaseAPI));
exports.CheckoutsApi = CheckoutsApi;
/**
 * CustomersApi - axios parameter creator
 * @export
 */
exports.CustomersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Create a Customer
         * @param {CustomerCreationParams} customerCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (customerCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'customerCreationParams' is not null or undefined
                            common_1.assertParamExists('createCustomer', 'customerCreationParams', customerCreationParams);
                            localVarPath = "/customers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(customerCreationParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete a Customer
         * @param {string} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'customerId' is not null or undefined
                            common_1.assertParamExists('deleteCustomer', 'customerId', customerId);
                            localVarPath = "/customers/{customerId}"
                                .replace("{" + "customerId" + "}", encodeURIComponent(String(customerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply the unique customer ID and recieve the corresponding customer.
         * @summary Retrieve a customer
         * @param {string} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'customerId' is not null or undefined
                            common_1.assertParamExists('getCustomer', 'customerId', customerId);
                            localVarPath = "/customers/{customerId}"
                                .replace("{" + "customerId" + "}", encodeURIComponent(String(customerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
exports.CustomersApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CustomersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a Customer
         * @param {CustomerCreationParams} customerCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (customerCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCustomer(customerCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete a Customer
         * @param {string} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCustomer(customerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply the unique customer ID and recieve the corresponding customer.
         * @summary Retrieve a customer
         * @param {string} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCustomer(customerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CustomersApi - factory interface
 * @export
 */
exports.CustomersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CustomersApiFp(configuration);
    return {
        /**
         *
         * @summary Create a Customer
         * @param {CustomerCreationParams} customerCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: function (customerCreationParams, options) {
            return localVarFp.createCustomer(customerCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete a Customer
         * @param {string} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerId, options) {
            return localVarFp.deleteCustomer(customerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply the unique customer ID and recieve the corresponding customer.
         * @summary Retrieve a customer
         * @param {string} customerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customerId, options) {
            return localVarFp.getCustomer(customerId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
var CustomersApi = /** @class */ (function (_super) {
    __extends(CustomersApi, _super);
    function CustomersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a Customer
     * @param {CustomerCreationParams} customerCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.createCustomer = function (customerCreationParams, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).createCustomer(customerCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete a Customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.deleteCustomer = function (customerId, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).deleteCustomer(customerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply the unique customer ID and recieve the corresponding customer.
     * @summary Retrieve a customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    CustomersApi.prototype.getCustomer = function (customerId, options) {
        var _this = this;
        return exports.CustomersApiFp(this.configuration).getCustomer(customerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomersApi;
}(base_1.BaseAPI));
exports.CustomersApi = CustomersApi;
/**
 * EmailsApi - axios parameter creator
 * @export
 */
exports.EmailsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve email details given the email ID
         * @summary Retrieve an email
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: function (emailId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'emailId' is not null or undefined
                            common_1.assertParamExists('getEmail', 'emailId', emailId);
                            localVarPath = "/emails/{emailId}"
                                .replace("{" + "emailId" + "}", encodeURIComponent(String(emailId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a list of emails given the required parameters
         * @summary List emails
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails: function (pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/emails";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Send an email from handsin by providing the parameters
         * @summary Send an email
         * @param {EmailCreationParams} emailCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail: function (emailCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'emailCreationParams' is not null or undefined
                            common_1.assertParamExists('sendEmail', 'emailCreationParams', emailCreationParams);
                            localVarPath = "/emails";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(emailCreationParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EmailsApi - functional programming interface
 * @export
 */
exports.EmailsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EmailsApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve email details given the email ID
         * @summary Retrieve an email
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: function (emailId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEmail(emailId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a list of emails given the required parameters
         * @summary List emails
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails: function (pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEmails(pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send an email from handsin by providing the parameters
         * @summary Send an email
         * @param {EmailCreationParams} emailCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail: function (emailCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendEmail(emailCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EmailsApi - factory interface
 * @export
 */
exports.EmailsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EmailsApiFp(configuration);
    return {
        /**
         * Retrieve email details given the email ID
         * @summary Retrieve an email
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: function (emailId, options) {
            return localVarFp.getEmail(emailId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a list of emails given the required parameters
         * @summary List emails
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails: function (pageNum, pageSize, limit, options) {
            return localVarFp.listEmails(pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send an email from handsin by providing the parameters
         * @summary Send an email
         * @param {EmailCreationParams} emailCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail: function (emailCreationParams, options) {
            return localVarFp.sendEmail(emailCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EmailsApi - object-oriented interface
 * @export
 * @class EmailsApi
 * @extends {BaseAPI}
 */
var EmailsApi = /** @class */ (function (_super) {
    __extends(EmailsApi, _super);
    function EmailsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve email details given the email ID
     * @summary Retrieve an email
     * @param {string} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    EmailsApi.prototype.getEmail = function (emailId, options) {
        var _this = this;
        return exports.EmailsApiFp(this.configuration).getEmail(emailId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a list of emails given the required parameters
     * @summary List emails
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    EmailsApi.prototype.listEmails = function (pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.EmailsApiFp(this.configuration).listEmails(pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send an email from handsin by providing the parameters
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    EmailsApi.prototype.sendEmail = function (emailCreationParams, options) {
        var _this = this;
        return exports.EmailsApiFp(this.configuration).sendEmail(emailCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EmailsApi;
}(base_1.BaseAPI));
exports.EmailsApi = EmailsApi;
/**
 * GroupPaymentsApi - axios parameter creator
 * @export
 */
exports.GroupPaymentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Cancel a group payment
         * @param {string} groupPaymentId
         * @param {InlineObject} inlineObject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelGroupPayment: function (groupPaymentId, inlineObject, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('cancelGroupPayment', 'groupPaymentId', groupPaymentId);
                            // verify required parameter 'inlineObject' is not null or undefined
                            common_1.assertParamExists('cancelGroupPayment', 'inlineObject', inlineObject);
                            localVarPath = "/group-payments/{groupPaymentId}/cancel"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a group payment
         * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPayment: function (createGroupPaymentRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createGroupPaymentRequest' is not null or undefined
                            common_1.assertParamExists('createGroupPayment', 'createGroupPaymentRequest', createGroupPaymentRequest);
                            localVarPath = "/group-payments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createGroupPaymentRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply the unique group payment ID and recieve the corresponding group payment.
         * @summary Retrieve a group payment
         * @param {string} groupPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPayment: function (groupPaymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('getGroupPayment', 'groupPaymentId', groupPaymentId);
                            localVarPath = "/group-payments/{groupPaymentId}"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all group payment refunds
         * @param {string} groupPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPaymentRefunds: function (groupPaymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('getGroupPaymentRefunds', 'groupPaymentId', groupPaymentId);
                            localVarPath = "/group-payments/{groupPaymentId}/refunds"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Join a group payment
         * @param {string} groupPaymentId
         * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroupPayment: function (groupPaymentId, joinGroupPaymentRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('joinGroupPayment', 'groupPaymentId', groupPaymentId);
                            // verify required parameter 'joinGroupPaymentRequest' is not null or undefined
                            common_1.assertParamExists('joinGroupPayment', 'joinGroupPaymentRequest', joinGroupPaymentRequest);
                            localVarPath = "/group-payments/{groupPaymentId}/join"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(joinGroupPaymentRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Kick member from a group payment
         * @param {string} groupPaymentId
         * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kickGroupPayment: function (groupPaymentId, kickGroupPaymentRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('kickGroupPayment', 'groupPaymentId', groupPaymentId);
                            // verify required parameter 'kickGroupPaymentRequest' is not null or undefined
                            common_1.assertParamExists('kickGroupPayment', 'kickGroupPaymentRequest', kickGroupPaymentRequest);
                            localVarPath = "/group-payments/{groupPaymentId}/kick"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(kickGroupPaymentRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Leave a group payment
         * @param {string} groupPaymentId
         * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroupPayment: function (groupPaymentId, leaveGroupPaymentRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('leaveGroupPayment', 'groupPaymentId', groupPaymentId);
                            // verify required parameter 'leaveGroupPaymentRequest' is not null or undefined
                            common_1.assertParamExists('leaveGroupPayment', 'leaveGroupPaymentRequest', leaveGroupPaymentRequest);
                            localVarPath = "/group-payments/{groupPaymentId}/leave"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(leaveGroupPaymentRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all group payments
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupPayments: function (pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/group-payments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Collect a payment from an individual user that is intended to be part of a group payment.
         * @summary Pay into a group payment
         * @param {string} groupPaymentId
         * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payInto: function (groupPaymentId, payIntoGroupPaymentRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('payInto', 'groupPaymentId', groupPaymentId);
                            // verify required parameter 'payIntoGroupPaymentRequest' is not null or undefined
                            common_1.assertParamExists('payInto', 'payIntoGroupPaymentRequest', payIntoGroupPaymentRequest);
                            localVarPath = "/group-payments/{groupPaymentId}/pay"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(payIntoGroupPaymentRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a full refund back to each customer that paid into the supplied group payment.
         * @summary Refund a group payment
         * @param {string} groupPaymentId
         * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundGroupPayment: function (groupPaymentId, groupPaymentRefundRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('refundGroupPayment', 'groupPaymentId', groupPaymentId);
                            // verify required parameter 'groupPaymentRefundRequest' is not null or undefined
                            common_1.assertParamExists('refundGroupPayment', 'groupPaymentRefundRequest', groupPaymentRefundRequest);
                            localVarPath = "/group-payments/{groupPaymentId}/refunds"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(groupPaymentRefundRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update a group payment
         * @param {string} groupPaymentId
         * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupPayment: function (groupPaymentId, groupPaymentUpdateParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupPaymentId' is not null or undefined
                            common_1.assertParamExists('updateGroupPayment', 'groupPaymentId', groupPaymentId);
                            // verify required parameter 'groupPaymentUpdateParams' is not null or undefined
                            common_1.assertParamExists('updateGroupPayment', 'groupPaymentUpdateParams', groupPaymentUpdateParams);
                            localVarPath = "/group-payments/{groupPaymentId}"
                                .replace("{" + "groupPaymentId" + "}", encodeURIComponent(String(groupPaymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(groupPaymentUpdateParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * GroupPaymentsApi - functional programming interface
 * @export
 */
exports.GroupPaymentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.GroupPaymentsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Cancel a group payment
         * @param {string} groupPaymentId
         * @param {InlineObject} inlineObject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelGroupPayment: function (groupPaymentId, inlineObject, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelGroupPayment(groupPaymentId, inlineObject, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a group payment
         * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPayment: function (createGroupPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createGroupPayment(createGroupPaymentRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply the unique group payment ID and recieve the corresponding group payment.
         * @summary Retrieve a group payment
         * @param {string} groupPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPayment: function (groupPaymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGroupPayment(groupPaymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all group payment refunds
         * @param {string} groupPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPaymentRefunds: function (groupPaymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getGroupPaymentRefunds(groupPaymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Join a group payment
         * @param {string} groupPaymentId
         * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroupPayment: function (groupPaymentId, joinGroupPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.joinGroupPayment(groupPaymentId, joinGroupPaymentRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Kick member from a group payment
         * @param {string} groupPaymentId
         * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kickGroupPayment: function (groupPaymentId, kickGroupPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.kickGroupPayment(groupPaymentId, kickGroupPaymentRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Leave a group payment
         * @param {string} groupPaymentId
         * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroupPayment: function (groupPaymentId, leaveGroupPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.leaveGroupPayment(groupPaymentId, leaveGroupPaymentRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all group payments
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupPayments: function (pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listGroupPayments(pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Collect a payment from an individual user that is intended to be part of a group payment.
         * @summary Pay into a group payment
         * @param {string} groupPaymentId
         * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payInto: function (groupPaymentId, payIntoGroupPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.payInto(groupPaymentId, payIntoGroupPaymentRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create a full refund back to each customer that paid into the supplied group payment.
         * @summary Refund a group payment
         * @param {string} groupPaymentId
         * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundGroupPayment: function (groupPaymentId, groupPaymentRefundRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.refundGroupPayment(groupPaymentId, groupPaymentRefundRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Update a group payment
         * @param {string} groupPaymentId
         * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupPayment: function (groupPaymentId, groupPaymentUpdateParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateGroupPayment(groupPaymentId, groupPaymentUpdateParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * GroupPaymentsApi - factory interface
 * @export
 */
exports.GroupPaymentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.GroupPaymentsApiFp(configuration);
    return {
        /**
         *
         * @summary Cancel a group payment
         * @param {string} groupPaymentId
         * @param {InlineObject} inlineObject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelGroupPayment: function (groupPaymentId, inlineObject, options) {
            return localVarFp.cancelGroupPayment(groupPaymentId, inlineObject, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Create a group payment
         * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPayment: function (createGroupPaymentRequest, options) {
            return localVarFp.createGroupPayment(createGroupPaymentRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply the unique group payment ID and recieve the corresponding group payment.
         * @summary Retrieve a group payment
         * @param {string} groupPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPayment: function (groupPaymentId, options) {
            return localVarFp.getGroupPayment(groupPaymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all group payment refunds
         * @param {string} groupPaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPaymentRefunds: function (groupPaymentId, options) {
            return localVarFp.getGroupPaymentRefunds(groupPaymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Join a group payment
         * @param {string} groupPaymentId
         * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroupPayment: function (groupPaymentId, joinGroupPaymentRequest, options) {
            return localVarFp.joinGroupPayment(groupPaymentId, joinGroupPaymentRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Kick member from a group payment
         * @param {string} groupPaymentId
         * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kickGroupPayment: function (groupPaymentId, kickGroupPaymentRequest, options) {
            return localVarFp.kickGroupPayment(groupPaymentId, kickGroupPaymentRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Leave a group payment
         * @param {string} groupPaymentId
         * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroupPayment: function (groupPaymentId, leaveGroupPaymentRequest, options) {
            return localVarFp.leaveGroupPayment(groupPaymentId, leaveGroupPaymentRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all group payments
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupPayments: function (pageNum, pageSize, limit, options) {
            return localVarFp.listGroupPayments(pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Collect a payment from an individual user that is intended to be part of a group payment.
         * @summary Pay into a group payment
         * @param {string} groupPaymentId
         * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payInto: function (groupPaymentId, payIntoGroupPaymentRequest, options) {
            return localVarFp.payInto(groupPaymentId, payIntoGroupPaymentRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a full refund back to each customer that paid into the supplied group payment.
         * @summary Refund a group payment
         * @param {string} groupPaymentId
         * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundGroupPayment: function (groupPaymentId, groupPaymentRefundRequest, options) {
            return localVarFp.refundGroupPayment(groupPaymentId, groupPaymentRefundRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update a group payment
         * @param {string} groupPaymentId
         * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupPayment: function (groupPaymentId, groupPaymentUpdateParams, options) {
            return localVarFp.updateGroupPayment(groupPaymentId, groupPaymentUpdateParams, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * GroupPaymentsApi - object-oriented interface
 * @export
 * @class GroupPaymentsApi
 * @extends {BaseAPI}
 */
var GroupPaymentsApi = /** @class */ (function (_super) {
    __extends(GroupPaymentsApi, _super);
    function GroupPaymentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Cancel a group payment
     * @param {string} groupPaymentId
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.cancelGroupPayment = function (groupPaymentId, inlineObject, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).cancelGroupPayment(groupPaymentId, inlineObject, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Create a group payment
     * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.createGroupPayment = function (createGroupPaymentRequest, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).createGroupPayment(createGroupPaymentRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply the unique group payment ID and recieve the corresponding group payment.
     * @summary Retrieve a group payment
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.getGroupPayment = function (groupPaymentId, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).getGroupPayment(groupPaymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all group payment refunds
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.getGroupPaymentRefunds = function (groupPaymentId, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).getGroupPaymentRefunds(groupPaymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Join a group payment
     * @param {string} groupPaymentId
     * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.joinGroupPayment = function (groupPaymentId, joinGroupPaymentRequest, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).joinGroupPayment(groupPaymentId, joinGroupPaymentRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Kick member from a group payment
     * @param {string} groupPaymentId
     * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.kickGroupPayment = function (groupPaymentId, kickGroupPaymentRequest, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).kickGroupPayment(groupPaymentId, kickGroupPaymentRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Leave a group payment
     * @param {string} groupPaymentId
     * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.leaveGroupPayment = function (groupPaymentId, leaveGroupPaymentRequest, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).leaveGroupPayment(groupPaymentId, leaveGroupPaymentRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all group payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.listGroupPayments = function (pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).listGroupPayments(pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Collect a payment from an individual user that is intended to be part of a group payment.
     * @summary Pay into a group payment
     * @param {string} groupPaymentId
     * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.payInto = function (groupPaymentId, payIntoGroupPaymentRequest, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).payInto(groupPaymentId, payIntoGroupPaymentRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a full refund back to each customer that paid into the supplied group payment.
     * @summary Refund a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.refundGroupPayment = function (groupPaymentId, groupPaymentRefundRequest, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).refundGroupPayment(groupPaymentId, groupPaymentRefundRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    GroupPaymentsApi.prototype.updateGroupPayment = function (groupPaymentId, groupPaymentUpdateParams, options) {
        var _this = this;
        return exports.GroupPaymentsApiFp(this.configuration).updateGroupPayment(groupPaymentId, groupPaymentUpdateParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GroupPaymentsApi;
}(base_1.BaseAPI));
exports.GroupPaymentsApi = GroupPaymentsApi;
/**
 * ItemsApi - axios parameter creator
 * @export
 */
exports.ItemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create an item by supplying the correct parameters.
         * @summary Create an item
         * @param {ItemCreationParams} itemCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (itemCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemCreationParams' is not null or undefined
                            common_1.assertParamExists('createItem', 'itemCreationParams', itemCreationParams);
                            localVarPath = "/items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemCreationParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a item session by supplying the correct parameters.
         * @summary Delete an item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            common_1.assertParamExists('deleteItem', 'itemId', itemId);
                            localVarPath = "/items/{itemId}"
                                .replace("{" + "itemId" + "}", encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply the unique dispute ID and receive corresponding item details.
         * @summary Retrieve an item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (itemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            common_1.assertParamExists('getItem', 'itemId', itemId);
                            localVarPath = "/items/{itemId}"
                                .replace("{" + "itemId" + "}", encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
         * @summary Retrieve multiple items
         * @param {ItemListParams} itemListParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (itemListParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemListParams' is not null or undefined
                            common_1.assertParamExists('getItems', 'itemListParams', itemListParams);
                            localVarPath = "/items/batch";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemListParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a list of items by supplying the correct parameters.
         * @summary List all items
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a item by supplying the correct parameters.
         * @summary Update an item
         * @param {string} itemId
         * @param {ItemUpdateParams} itemUpdateParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (itemId, itemUpdateParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'itemId' is not null or undefined
                            common_1.assertParamExists('updateItem', 'itemId', itemId);
                            // verify required parameter 'itemUpdateParams' is not null or undefined
                            common_1.assertParamExists('updateItem', 'itemUpdateParams', itemUpdateParams);
                            localVarPath = "/items/{itemId}"
                                .replace("{" + "itemId" + "}", encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemUpdateParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ItemsApi - functional programming interface
 * @export
 */
exports.ItemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ItemsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create an item by supplying the correct parameters.
         * @summary Create an item
         * @param {ItemCreationParams} itemCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (itemCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createItem(itemCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a item session by supplying the correct parameters.
         * @summary Delete an item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteItem(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply the unique dispute ID and receive corresponding item details.
         * @summary Retrieve an item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (itemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItem(itemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
         * @summary Retrieve multiple items
         * @param {ItemListParams} itemListParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (itemListParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItems(itemListParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a list of items by supplying the correct parameters.
         * @summary List all items
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listItems(pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a item by supplying the correct parameters.
         * @summary Update an item
         * @param {string} itemId
         * @param {ItemUpdateParams} itemUpdateParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (itemId, itemUpdateParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateItem(itemId, itemUpdateParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ItemsApi - factory interface
 * @export
 */
exports.ItemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ItemsApiFp(configuration);
    return {
        /**
         * Create an item by supplying the correct parameters.
         * @summary Create an item
         * @param {ItemCreationParams} itemCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: function (itemCreationParams, options) {
            return localVarFp.createItem(itemCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a item session by supplying the correct parameters.
         * @summary Delete an item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (itemId, options) {
            return localVarFp.deleteItem(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply the unique dispute ID and receive corresponding item details.
         * @summary Retrieve an item
         * @param {string} itemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (itemId, options) {
            return localVarFp.getItem(itemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
         * @summary Retrieve multiple items
         * @param {ItemListParams} itemListParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (itemListParams, options) {
            return localVarFp.getItems(itemListParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a list of items by supplying the correct parameters.
         * @summary List all items
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: function (pageNum, pageSize, limit, options) {
            return localVarFp.listItems(pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a item by supplying the correct parameters.
         * @summary Update an item
         * @param {string} itemId
         * @param {ItemUpdateParams} itemUpdateParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (itemId, itemUpdateParams, options) {
            return localVarFp.updateItem(itemId, itemUpdateParams, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
var ItemsApi = /** @class */ (function (_super) {
    __extends(ItemsApi, _super);
    function ItemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create an item by supplying the correct parameters.
     * @summary Create an item
     * @param {ItemCreationParams} itemCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.createItem = function (itemCreationParams, options) {
        var _this = this;
        return exports.ItemsApiFp(this.configuration).createItem(itemCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a item session by supplying the correct parameters.
     * @summary Delete an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.deleteItem = function (itemId, options) {
        var _this = this;
        return exports.ItemsApiFp(this.configuration).deleteItem(itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply the unique dispute ID and receive corresponding item details.
     * @summary Retrieve an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.getItem = function (itemId, options) {
        var _this = this;
        return exports.ItemsApiFp(this.configuration).getItem(itemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
     * @summary Retrieve multiple items
     * @param {ItemListParams} itemListParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.getItems = function (itemListParams, options) {
        var _this = this;
        return exports.ItemsApiFp(this.configuration).getItems(itemListParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a list of items by supplying the correct parameters.
     * @summary List all items
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.listItems = function (pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.ItemsApiFp(this.configuration).listItems(pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a item by supplying the correct parameters.
     * @summary Update an item
     * @param {string} itemId
     * @param {ItemUpdateParams} itemUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    ItemsApi.prototype.updateItem = function (itemId, itemUpdateParams, options) {
        var _this = this;
        return exports.ItemsApiFp(this.configuration).updateItem(itemId, itemUpdateParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ItemsApi;
}(base_1.BaseAPI));
exports.ItemsApi = ItemsApi;
/**
 * MerchantApi - axios parameter creator
 * @export
 */
exports.MerchantApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
         * @summary Create a merchant account
         * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchant: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            common_1.assertParamExists('createMerchant', 'body', body);
                            localVarPath = "/merchants";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete a merchant account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMerchant: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/merchants";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply a merchant JWT token and retrieve merchant data
         * @summary Retrieve merchant data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchant: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/merchants";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Invite a merchant account team
         * @param {string} merchantId
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMerchant: function (merchantId, inlineObject1, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            common_1.assertParamExists('inviteMerchant', 'merchantId', merchantId);
                            // verify required parameter 'inlineObject1' is not null or undefined
                            common_1.assertParamExists('inviteMerchant', 'inlineObject1', inlineObject1);
                            localVarPath = "/merchants/{merchantId}/invite"
                                .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
         * @summary Join a merchant account team
         * @param {string} merchantId
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinMerchant: function (merchantId, key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            common_1.assertParamExists('joinMerchant', 'merchantId', merchantId);
                            // verify required parameter 'key' is not null or undefined
                            common_1.assertParamExists('joinMerchant', 'key', key);
                            localVarPath = "/merchants/{merchantId}/join"
                                .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (key !== undefined) {
                                localVarQueryParameter['key'] = key;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
         * @summary Login to a merchant account
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginMerchant: function (merchantId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'merchantId' is not null or undefined
                            common_1.assertParamExists('loginMerchant', 'merchantId', merchantId);
                            localVarPath = "/merchants/{merchantId}/token"
                                .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication account-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication account-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply a merchant JWT token and email parameters to send an email through the handsin email service
         * @summary Send an email
         * @param {EmailCreationParams} emailCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailMerchant: function (emailCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'emailCreationParams' is not null or undefined
                            common_1.assertParamExists('sendEmailMerchant', 'emailCreationParams', emailCreationParams);
                            localVarPath = "/merchants/sendEmail";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(emailCreationParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * MerchantApi - functional programming interface
 * @export
 */
exports.MerchantApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.MerchantApiAxiosParamCreator(configuration);
    return {
        /**
         * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
         * @summary Create a merchant account
         * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchant: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createMerchant(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete a merchant account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMerchant: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMerchant(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply a merchant JWT token and retrieve merchant data
         * @summary Retrieve merchant data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchant: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMerchant(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Invite a merchant account team
         * @param {string} merchantId
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMerchant: function (merchantId, inlineObject1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.inviteMerchant(merchantId, inlineObject1, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
         * @summary Join a merchant account team
         * @param {string} merchantId
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinMerchant: function (merchantId, key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.joinMerchant(merchantId, key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
         * @summary Login to a merchant account
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginMerchant: function (merchantId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.loginMerchant(merchantId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply a merchant JWT token and email parameters to send an email through the handsin email service
         * @summary Send an email
         * @param {EmailCreationParams} emailCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailMerchant: function (emailCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendEmailMerchant(emailCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * MerchantApi - factory interface
 * @export
 */
exports.MerchantApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.MerchantApiFp(configuration);
    return {
        /**
         * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
         * @summary Create a merchant account
         * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchant: function (body, options) {
            return localVarFp.createMerchant(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete a merchant account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMerchant: function (options) {
            return localVarFp.deleteMerchant(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply a merchant JWT token and retrieve merchant data
         * @summary Retrieve merchant data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchant: function (options) {
            return localVarFp.getMerchant(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Invite a merchant account team
         * @param {string} merchantId
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMerchant: function (merchantId, inlineObject1, options) {
            return localVarFp.inviteMerchant(merchantId, inlineObject1, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
         * @summary Join a merchant account team
         * @param {string} merchantId
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinMerchant: function (merchantId, key, options) {
            return localVarFp.joinMerchant(merchantId, key, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
         * @summary Login to a merchant account
         * @param {string} merchantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginMerchant: function (merchantId, options) {
            return localVarFp.loginMerchant(merchantId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply a merchant JWT token and email parameters to send an email through the handsin email service
         * @summary Send an email
         * @param {EmailCreationParams} emailCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailMerchant: function (emailCreationParams, options) {
            return localVarFp.sendEmailMerchant(emailCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * MerchantApi - object-oriented interface
 * @export
 * @class MerchantApi
 * @extends {BaseAPI}
 */
var MerchantApi = /** @class */ (function (_super) {
    __extends(MerchantApi, _super);
    function MerchantApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
     * @summary Create a merchant account
     * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    MerchantApi.prototype.createMerchant = function (body, options) {
        var _this = this;
        return exports.MerchantApiFp(this.configuration).createMerchant(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete a merchant account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    MerchantApi.prototype.deleteMerchant = function (options) {
        var _this = this;
        return exports.MerchantApiFp(this.configuration).deleteMerchant(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply a merchant JWT token and retrieve merchant data
     * @summary Retrieve merchant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    MerchantApi.prototype.getMerchant = function (options) {
        var _this = this;
        return exports.MerchantApiFp(this.configuration).getMerchant(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Invite a merchant account team
     * @param {string} merchantId
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    MerchantApi.prototype.inviteMerchant = function (merchantId, inlineObject1, options) {
        var _this = this;
        return exports.MerchantApiFp(this.configuration).inviteMerchant(merchantId, inlineObject1, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
     * @summary Join a merchant account team
     * @param {string} merchantId
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    MerchantApi.prototype.joinMerchant = function (merchantId, key, options) {
        var _this = this;
        return exports.MerchantApiFp(this.configuration).joinMerchant(merchantId, key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
     * @summary Login to a merchant account
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    MerchantApi.prototype.loginMerchant = function (merchantId, options) {
        var _this = this;
        return exports.MerchantApiFp(this.configuration).loginMerchant(merchantId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply a merchant JWT token and email parameters to send an email through the handsin email service
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    MerchantApi.prototype.sendEmailMerchant = function (emailCreationParams, options) {
        var _this = this;
        return exports.MerchantApiFp(this.configuration).sendEmailMerchant(emailCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MerchantApi;
}(base_1.BaseAPI));
exports.MerchantApi = MerchantApi;
/**
 * MerchantConnectApi - axios parameter creator
 * @export
 */
exports.MerchantConnectApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
         * @summary Connect to Merchant Payment Service
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoriseMerchantPaymentConnect: function (service, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'service' is not null or undefined
                            common_1.assertParamExists('authoriseMerchantPaymentConnect', 'service', service);
                            localVarPath = "/merchant/{service}/connect"
                                .replace("{" + "service" + "}", encodeURIComponent(String(service)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get Connection to Merchant Payment Service Properties
         * @summary Get Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantPaymentConnect: function (service, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'service' is not null or undefined
                            common_1.assertParamExists('getMerchantPaymentConnect', 'service', service);
                            localVarPath = "/merchant/{service}"
                                .replace("{" + "service" + "}", encodeURIComponent(String(service)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
         * @summary Obtain Merchant Payment Connection
         * @param {Service} service
         * @param {string} [code]
         * @param {string} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainMerchantPaymentConnect: function (service, code, state, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'service' is not null or undefined
                    common_1.assertParamExists('obtainMerchantPaymentConnect', 'service', service);
                    localVarPath = "/merchant/{service}/obtain"
                        .replace("{" + "service" + "}", encodeURIComponent(String(service)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (code !== undefined) {
                        localVarQueryParameter['code'] = code;
                    }
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Re-Authorise Connection to Merchant Payment Service
         * @summary Renew Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewMerchantPaymentConnect: function (service, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'service' is not null or undefined
                            common_1.assertParamExists('renewMerchantPaymentConnect', 'service', service);
                            localVarPath = "/merchant/{service}/renew"
                                .replace("{" + "service" + "}", encodeURIComponent(String(service)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke Connection Tokens to Merchant Payment Service
         * @summary Revoke Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMerchantPaymentConnect: function (service, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'service' is not null or undefined
                            common_1.assertParamExists('revokeMerchantPaymentConnect', 'service', service);
                            localVarPath = "/merchant/{service}/revoke"
                                .replace("{" + "service" + "}", encodeURIComponent(String(service)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * MerchantConnectApi - functional programming interface
 * @export
 */
exports.MerchantConnectApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.MerchantConnectApiAxiosParamCreator(configuration);
    return {
        /**
         * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
         * @summary Connect to Merchant Payment Service
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoriseMerchantPaymentConnect: function (service, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authoriseMerchantPaymentConnect(service, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get Connection to Merchant Payment Service Properties
         * @summary Get Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantPaymentConnect: function (service, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMerchantPaymentConnect(service, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
         * @summary Obtain Merchant Payment Connection
         * @param {Service} service
         * @param {string} [code]
         * @param {string} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainMerchantPaymentConnect: function (service, code, state, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.obtainMerchantPaymentConnect(service, code, state, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Re-Authorise Connection to Merchant Payment Service
         * @summary Renew Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewMerchantPaymentConnect: function (service, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.renewMerchantPaymentConnect(service, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Revoke Connection Tokens to Merchant Payment Service
         * @summary Revoke Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMerchantPaymentConnect: function (service, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.revokeMerchantPaymentConnect(service, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * MerchantConnectApi - factory interface
 * @export
 */
exports.MerchantConnectApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.MerchantConnectApiFp(configuration);
    return {
        /**
         * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
         * @summary Connect to Merchant Payment Service
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoriseMerchantPaymentConnect: function (service, options) {
            return localVarFp.authoriseMerchantPaymentConnect(service, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get Connection to Merchant Payment Service Properties
         * @summary Get Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantPaymentConnect: function (service, options) {
            return localVarFp.getMerchantPaymentConnect(service, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
         * @summary Obtain Merchant Payment Connection
         * @param {Service} service
         * @param {string} [code]
         * @param {string} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainMerchantPaymentConnect: function (service, code, state, options) {
            return localVarFp.obtainMerchantPaymentConnect(service, code, state, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Re-Authorise Connection to Merchant Payment Service
         * @summary Renew Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewMerchantPaymentConnect: function (service, options) {
            return localVarFp.renewMerchantPaymentConnect(service, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke Connection Tokens to Merchant Payment Service
         * @summary Revoke Merchant Payment Connection
         * @param {Service} service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMerchantPaymentConnect: function (service, options) {
            return localVarFp.revokeMerchantPaymentConnect(service, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * MerchantConnectApi - object-oriented interface
 * @export
 * @class MerchantConnectApi
 * @extends {BaseAPI}
 */
var MerchantConnectApi = /** @class */ (function (_super) {
    __extends(MerchantConnectApi, _super);
    function MerchantConnectApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
     * @summary Connect to Merchant Payment Service
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    MerchantConnectApi.prototype.authoriseMerchantPaymentConnect = function (service, options) {
        var _this = this;
        return exports.MerchantConnectApiFp(this.configuration).authoriseMerchantPaymentConnect(service, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get Connection to Merchant Payment Service Properties
     * @summary Get Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    MerchantConnectApi.prototype.getMerchantPaymentConnect = function (service, options) {
        var _this = this;
        return exports.MerchantConnectApiFp(this.configuration).getMerchantPaymentConnect(service, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
     * @summary Obtain Merchant Payment Connection
     * @param {Service} service
     * @param {string} [code]
     * @param {string} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    MerchantConnectApi.prototype.obtainMerchantPaymentConnect = function (service, code, state, options) {
        var _this = this;
        return exports.MerchantConnectApiFp(this.configuration).obtainMerchantPaymentConnect(service, code, state, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Re-Authorise Connection to Merchant Payment Service
     * @summary Renew Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    MerchantConnectApi.prototype.renewMerchantPaymentConnect = function (service, options) {
        var _this = this;
        return exports.MerchantConnectApiFp(this.configuration).renewMerchantPaymentConnect(service, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke Connection Tokens to Merchant Payment Service
     * @summary Revoke Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    MerchantConnectApi.prototype.revokeMerchantPaymentConnect = function (service, options) {
        var _this = this;
        return exports.MerchantConnectApiFp(this.configuration).revokeMerchantPaymentConnect(service, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MerchantConnectApi;
}(base_1.BaseAPI));
exports.MerchantConnectApi = MerchantConnectApi;
/**
 * OrdersApi - axios parameter creator
 * @export
 */
exports.OrdersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Create an order
         * @param {OrderCreationParams} orderCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: function (orderCreationParams, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderCreationParams' is not null or undefined
                            common_1.assertParamExists('createOrder', 'orderCreationParams', orderCreationParams);
                            localVarPath = "/orders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(orderCreationParams, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve an order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('getOrder', 'orderId', orderId);
                            localVarPath = "/orders/{orderId}"
                                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all Orders
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/orders";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update an order
         * @param {string} orderId
         * @param {PartialOrderCreationParams} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (orderId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orderId' is not null or undefined
                            common_1.assertParamExists('updateOrder', 'orderId', orderId);
                            // verify required parameter 'body' is not null or undefined
                            common_1.assertParamExists('updateOrder', 'body', body);
                            localVarPath = "/orders/{orderId}"
                                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
exports.OrdersApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.OrdersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create an order
         * @param {OrderCreationParams} orderCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: function (orderCreationParams, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOrder(orderCreationParams, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve an order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrder(orderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all Orders
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listOrders(pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Update an order
         * @param {string} orderId
         * @param {PartialOrderCreationParams} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (orderId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateOrder(orderId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * OrdersApi - factory interface
 * @export
 */
exports.OrdersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.OrdersApiFp(configuration);
    return {
        /**
         *
         * @summary Create an order
         * @param {OrderCreationParams} orderCreationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: function (orderCreationParams, options) {
            return localVarFp.createOrder(orderCreationParams, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve an order
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, options) {
            return localVarFp.getOrder(orderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all Orders
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: function (pageNum, pageSize, limit, options) {
            return localVarFp.listOrders(pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update an order
         * @param {string} orderId
         * @param {PartialOrderCreationParams} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (orderId, body, options) {
            return localVarFp.updateOrder(orderId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
var OrdersApi = /** @class */ (function (_super) {
    __extends(OrdersApi, _super);
    function OrdersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create an order
     * @param {OrderCreationParams} orderCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.createOrder = function (orderCreationParams, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).createOrder(orderCreationParams, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve an order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.getOrder = function (orderId, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).getOrder(orderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all Orders
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.listOrders = function (pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).listOrders(pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update an order
     * @param {string} orderId
     * @param {PartialOrderCreationParams} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    OrdersApi.prototype.updateOrder = function (orderId, body, options) {
        var _this = this;
        return exports.OrdersApiFp(this.configuration).updateOrder(orderId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OrdersApi;
}(base_1.BaseAPI));
exports.OrdersApi = OrdersApi;
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
exports.PaymentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Cancel a payment
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: function (paymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'paymentId' is not null or undefined
                            common_1.assertParamExists('cancelPayment', 'paymentId', paymentId);
                            localVarPath = "/payments/{paymentId}/cancel"
                                .replace("{" + "paymentId" + "}", encodeURIComponent(String(paymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Collect a payment from an individual user
         * @summary Create a payment
         * @param {CreatePaymentRequest} createPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: function (createPaymentRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createPaymentRequest' is not null or undefined
                            common_1.assertParamExists('createPayment', 'createPaymentRequest', createPaymentRequest);
                            localVarPath = "/payments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createPaymentRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Supply the unique payment ID and receive corresponding payment details.
         * @summary Retrieve a payment
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: function (paymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'paymentId' is not null or undefined
                            common_1.assertParamExists('getPayment', 'paymentId', paymentId);
                            localVarPath = "/payments/{paymentId}"
                                .replace("{" + "paymentId" + "}", encodeURIComponent(String(paymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all payment refunds
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentRefunds: function (paymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'paymentId' is not null or undefined
                            common_1.assertParamExists('getPaymentRefunds', 'paymentId', paymentId);
                            localVarPath = "/payments/{paymentId}/refunds"
                                .replace("{" + "paymentId" + "}", encodeURIComponent(String(paymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all payments
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/payments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a full or partial refund back to a customer, from a supplied payment.
         * @summary Refund a payment
         * @param {string} paymentId
         * @param {PaymentRefundRequest} paymentRefundRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment: function (paymentId, paymentRefundRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'paymentId' is not null or undefined
                            common_1.assertParamExists('refundPayment', 'paymentId', paymentId);
                            // verify required parameter 'paymentRefundRequest' is not null or undefined
                            common_1.assertParamExists('refundPayment', 'paymentRefundRequest', paymentRefundRequest);
                            localVarPath = "/payments/{paymentId}/refunds"
                                .replace("{" + "paymentId" + "}", encodeURIComponent(String(paymentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentRefundRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
exports.PaymentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PaymentsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Cancel a payment
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: function (paymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelPayment(paymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Collect a payment from an individual user
         * @summary Create a payment
         * @param {CreatePaymentRequest} createPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: function (createPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPayment(createPaymentRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Supply the unique payment ID and receive corresponding payment details.
         * @summary Retrieve a payment
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: function (paymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPayment(paymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all payment refunds
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentRefunds: function (paymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPaymentRefunds(paymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all payments
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPayments(pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create a full or partial refund back to a customer, from a supplied payment.
         * @summary Refund a payment
         * @param {string} paymentId
         * @param {PaymentRefundRequest} paymentRefundRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment: function (paymentId, paymentRefundRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.refundPayment(paymentId, paymentRefundRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * PaymentsApi - factory interface
 * @export
 */
exports.PaymentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PaymentsApiFp(configuration);
    return {
        /**
         *
         * @summary Cancel a payment
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: function (paymentId, options) {
            return localVarFp.cancelPayment(paymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Collect a payment from an individual user
         * @summary Create a payment
         * @param {CreatePaymentRequest} createPaymentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: function (createPaymentRequest, options) {
            return localVarFp.createPayment(createPaymentRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Supply the unique payment ID and receive corresponding payment details.
         * @summary Retrieve a payment
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: function (paymentId, options) {
            return localVarFp.getPayment(paymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all payment refunds
         * @param {string} paymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentRefunds: function (paymentId, options) {
            return localVarFp.getPaymentRefunds(paymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all payments
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: function (pageNum, pageSize, limit, options) {
            return localVarFp.listPayments(pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a full or partial refund back to a customer, from a supplied payment.
         * @summary Refund a payment
         * @param {string} paymentId
         * @param {PaymentRefundRequest} paymentRefundRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment: function (paymentId, paymentRefundRequest, options) {
            return localVarFp.refundPayment(paymentId, paymentRefundRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
var PaymentsApi = /** @class */ (function (_super) {
    __extends(PaymentsApi, _super);
    function PaymentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Cancel a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.cancelPayment = function (paymentId, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).cancelPayment(paymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Collect a payment from an individual user
     * @summary Create a payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.createPayment = function (createPaymentRequest, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).createPayment(createPaymentRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Supply the unique payment ID and receive corresponding payment details.
     * @summary Retrieve a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.getPayment = function (paymentId, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).getPayment(paymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all payment refunds
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.getPaymentRefunds = function (paymentId, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).getPaymentRefunds(paymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.listPayments = function (pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).listPayments(pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a full or partial refund back to a customer, from a supplied payment.
     * @summary Refund a payment
     * @param {string} paymentId
     * @param {PaymentRefundRequest} paymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    PaymentsApi.prototype.refundPayment = function (paymentId, paymentRefundRequest, options) {
        var _this = this;
        return exports.PaymentsApiFp(this.configuration).refundPayment(paymentId, paymentRefundRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PaymentsApi;
}(base_1.BaseAPI));
exports.PaymentsApi = PaymentsApi;
/**
 * RefundsApi - axios parameter creator
 * @export
 */
exports.RefundsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Retrieve a refund
         * @param {string} refundId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefund: function (refundId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'refundId' is not null or undefined
                            common_1.assertParamExists('getRefund', 'refundId', refundId);
                            localVarPath = "/refunds/{refundId}"
                                .replace("{" + "refundId" + "}", encodeURIComponent(String(refundId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary List all refunds
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (pageNum, pageSize, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/refunds";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication merchant-api-key required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)
                                // authentication merchant-jwt required
                                // http bearer authentication required
                            ];
                        case 1:
                            // authentication merchant-api-key required
                            _a.sent();
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication merchant-jwt required
                            // http bearer authentication required
                            _a.sent();
                            if (pageNum !== undefined) {
                                localVarQueryParameter['pageNum'] = pageNum;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * RefundsApi - functional programming interface
 * @export
 */
exports.RefundsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.RefundsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Retrieve a refund
         * @param {string} refundId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefund: function (refundId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRefund(refundId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all refunds
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (pageNum, pageSize, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listRefunds(pageNum, pageSize, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * RefundsApi - factory interface
 * @export
 */
exports.RefundsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.RefundsApiFp(configuration);
    return {
        /**
         *
         * @summary Retrieve a refund
         * @param {string} refundId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefund: function (refundId, options) {
            return localVarFp.getRefund(refundId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all refunds
         * @param {number} [pageNum]
         * @param {number} [pageSize]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRefunds: function (pageNum, pageSize, limit, options) {
            return localVarFp.listRefunds(pageNum, pageSize, limit, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * RefundsApi - object-oriented interface
 * @export
 * @class RefundsApi
 * @extends {BaseAPI}
 */
var RefundsApi = /** @class */ (function (_super) {
    __extends(RefundsApi, _super);
    function RefundsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Retrieve a refund
     * @param {string} refundId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    RefundsApi.prototype.getRefund = function (refundId, options) {
        var _this = this;
        return exports.RefundsApiFp(this.configuration).getRefund(refundId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all refunds
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    RefundsApi.prototype.listRefunds = function (pageNum, pageSize, limit, options) {
        var _this = this;
        return exports.RefundsApiFp(this.configuration).listRefunds(pageNum, pageSize, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RefundsApi;
}(base_1.BaseAPI));
exports.RefundsApi = RefundsApi;
