/**
 * Merchant API
 * The Hands In API is the first and only service that enables users to transact within a group. Our API is heavily orientated around being a RESTful service  that has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, ant utilizes standard HTTP response codes
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface ACHDetails
 */
export interface ACHDetails {
    /**
     * The routing number for the bank account.
     * @type {string}
     * @memberof ACHDetails
     */
    'routingNumber'?: string;
    /**
     * The last few digits of the bank account number.
     * @type {string}
     * @memberof ACHDetails
     */
    'accountNumberSuffix'?: string;
    /**
     * The type of the bank account performing the transfer. The account type can be `CHECKING`, `SAVINGS`, or `UNKNOWN`.
     * @type {string}
     * @memberof ACHDetails
     */
    'accountType'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const AVSStatus: {
    readonly Accepted: "AVS_ACCEPTED";
    readonly Rejected: "AVS_REJECTED";
    readonly NotChecked: "AVS_NOT_CHECKED";
};
export declare type AVSStatus = typeof AVSStatus[keyof typeof AVSStatus];
/**
 *
 * @export
 * @interface AccountApp
 */
export interface AccountApp {
    /**
     *
     * @type {string}
     * @memberof AccountApp
     */
    'accId': string;
    /**
     *
     * @type {string}
     * @memberof AccountApp
     */
    'appId': string;
    /**
     *
     * @type {string}
     * @memberof AccountApp
     */
    'appName': string;
    /**
     *
     * @type {string}
     * @memberof AccountApp
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountApp
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface AccountCreationParams
 */
export interface AccountCreationParams {
    /**
     * Email address. See [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
     * @type {string}
     * @memberof AccountCreationParams
     */
    'email': string;
    /**
     * Password
     * @type {string}
     * @memberof AccountCreationParams
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof AccountCreationParams
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof AccountCreationParams
     */
    'lastName'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountCreationParams
     */
    'language'?: string;
    /**
     *
     * @type {Country}
     * @memberof AccountCreationParams
     */
    'country'?: Country;
}
/**
 *
 * @export
 * @interface AccountDTO
 */
export interface AccountDTO {
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    'lastName'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    'email': string;
    /**
     *
     * @type {boolean}
     * @memberof AccountDTO
     */
    'emailVerified': boolean;
    /**
     *
     * @type {Country}
     * @memberof AccountDTO
     */
    'country'?: Country;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    'language'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountDTO
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {AddressLines}
     * @memberof Address
     */
    'addressLines': AddressLines;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    'city'?: string;
    /**
     *
     * @type {Country}
     * @memberof Address
     */
    'country'?: Country;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    'postalCode'?: string;
    /**
     *
     * @type {Sublocality}
     * @memberof Address
     */
    'sublocality'?: Sublocality;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    'organization'?: string;
}
/**
 *
 * @export
 * @interface AddressLines
 */
export interface AddressLines {
    /**
     *
     * @type {string}
     * @memberof AddressLines
     */
    'addressLine1': string;
    /**
     *
     * @type {string}
     * @memberof AddressLines
     */
    'addressLine2'?: string;
    /**
     *
     * @type {string}
     * @memberof AddressLines
     */
    'addressLine3'?: string;
}
/**
 *
 * @export
 * @interface AdjustableQuantity
 */
export interface AdjustableQuantity {
    /**
     *
     * @type {number}
     * @memberof AdjustableQuantity
     */
    'minimum': number;
    /**
     *
     * @type {number}
     * @memberof AdjustableQuantity
     */
    'maxmimum': number;
}
/**
 *
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     *
     * @type {string}
     * @memberof Attachment
     */
    'data': string;
    /**
     *
     * @type {string}
     * @memberof Attachment
     */
    'filename'?: string;
}
/**
 *
 * @export
 * @interface BankAccountPaymentDetails
 */
export interface BankAccountPaymentDetails {
    /**
     *
     * @type {string}
     * @memberof BankAccountPaymentDetails
     */
    'bankName'?: string;
    /**
     *
     * @type {string}
     * @memberof BankAccountPaymentDetails
     */
    'transferType'?: string;
    /**
     *
     * @type {string}
     * @memberof BankAccountPaymentDetails
     */
    'accountOwnershipType'?: string;
    /**
     *
     * @type {string}
     * @memberof BankAccountPaymentDetails
     */
    'fingerprint'?: string;
    /**
     *
     * @type {string}
     * @memberof BankAccountPaymentDetails
     */
    'country'?: string;
    /**
     *
     * @type {string}
     * @memberof BankAccountPaymentDetails
     */
    'statementDescription'?: string;
    /**
     *
     * @type {ACHDetails}
     * @memberof BankAccountPaymentDetails
     */
    'achDetails'?: ACHDetails;
    /**
     *
     * @type {Array<PaymentError>}
     * @memberof BankAccountPaymentDetails
     */
    'errors'?: Array<PaymentError>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const CVVStatus: {
    readonly Accepted: "CVV_ACCEPTED";
    readonly Rejected: "CVV_REJECTED";
    readonly NotChecked: "CVV_NOT_CHECKED";
};
export declare type CVVStatus = typeof CVVStatus[keyof typeof CVVStatus];
/**
 *
 * @export
 * @enum {string}
 */
export declare const CaptureMethod: {
    readonly Payment: "PAYMENT";
    readonly Capture: "CAPTURE";
    readonly Subscription: "SUBSCRIPTION";
};
export declare type CaptureMethod = typeof CaptureMethod[keyof typeof CaptureMethod];
/**
 *
 * @export
 * @enum {string}
 */
export declare const CardBrand: {
    readonly OtherBrand: "OTHER_BRAND";
    readonly Visa: "VISA";
    readonly Mastercard: "MASTERCARD";
    readonly AmericanExpress: "AMERICAN_EXPRESS";
    readonly Discover: "DISCOVER";
    readonly DiscoverDiners: "DISCOVER_DINERS";
    readonly Jcb: "JCB";
    readonly ChinaUnionpay: "CHINA_UNIONPAY";
    readonly SquareGiftCard: "SQUARE_GIFT_CARD";
    readonly SquareCapitalCard: "SQUARE_CAPITAL_CARD";
    readonly Interac: "INTERAC";
    readonly Eftpos: "EFTPOS";
    readonly Felica: "FELICA";
    readonly Ebt: "EBT";
};
export declare type CardBrand = typeof CardBrand[keyof typeof CardBrand];
/**
 *
 * @export
 * @interface CardDetails
 */
export interface CardDetails {
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'id': string;
    /**
     *
     * @type {CardBrand}
     * @memberof CardDetails
     */
    'cardBrand': CardBrand;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'last4'?: string;
    /**
     *
     * @type {number}
     * @memberof CardDetails
     */
    'expMonth'?: number;
    /**
     *
     * @type {number}
     * @memberof CardDetails
     */
    'expYear'?: number;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'cardholderName'?: string;
    /**
     *
     * @type {Address}
     * @memberof CardDetails
     */
    'billingAddress'?: Address;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'fingerprint'?: string;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'customerId'?: string;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'referenceId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof CardDetails
     */
    'enabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'cardType'?: string;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'prepaidType'?: string;
    /**
     *
     * @type {string}
     * @memberof CardDetails
     */
    'bin'?: string;
}
/**
 *
 * @export
 * @interface CardPaymentDetails
 */
export interface CardPaymentDetails {
    /**
     *
     * @type {string}
     * @memberof CardPaymentDetails
     */
    'status'?: string;
    /**
     *
     * @type {CardDetails}
     * @memberof CardPaymentDetails
     */
    'card'?: CardDetails;
    /**
     *
     * @type {string}
     * @memberof CardPaymentDetails
     */
    'entryMethod'?: string;
    /**
     *
     * @type {CVVStatus}
     * @memberof CardPaymentDetails
     */
    'cvvStatus'?: CVVStatus;
    /**
     *
     * @type {AVSStatus}
     * @memberof CardPaymentDetails
     */
    'avsStatus'?: AVSStatus;
    /**
     *
     * @type {string}
     * @memberof CardPaymentDetails
     */
    'authResultCode'?: string;
    /**
     *
     * @type {string}
     * @memberof CardPaymentDetails
     */
    'applicationIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof CardPaymentDetails
     */
    'applicationName'?: string;
    /**
     *
     * @type {string}
     * @memberof CardPaymentDetails
     */
    'applicationCryptogram'?: string;
    /**
     *
     * @type {CardVerificationMethod}
     * @memberof CardPaymentDetails
     */
    'verificationMethod'?: CardVerificationMethod;
    /**
     *
     * @type {CardVerificationResult}
     * @memberof CardPaymentDetails
     */
    'verificationResults'?: CardVerificationResult;
    /**
     *
     * @type {string}
     * @memberof CardPaymentDetails
     */
    'statementDescription'?: string;
    /**
     *
     * @type {DeviceDetails}
     * @memberof CardPaymentDetails
     */
    'deviceDetails'?: DeviceDetails;
    /**
     *
     * @type {CardPaymentTimeline}
     * @memberof CardPaymentDetails
     */
    'cardPaymentTimeline'?: CardPaymentTimeline;
    /**
     *
     * @type {boolean}
     * @memberof CardPaymentDetails
     */
    'refundRequiresCardPresence'?: boolean;
    /**
     * Information about errors encountered during the request.
     * @type {Array<PaymentError>}
     * @memberof CardPaymentDetails
     */
    'errors'?: Array<PaymentError>;
}
/**
 *
 * @export
 * @interface CardPaymentTimeline
 */
export interface CardPaymentTimeline {
    /**
     *
     * @type {string}
     * @memberof CardPaymentTimeline
     */
    'authorizedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof CardPaymentTimeline
     */
    'capturedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof CardPaymentTimeline
     */
    'voidedAt'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const CardVerificationMethod: {
    readonly Pin: "PIN";
    readonly PinAndSignature: "PIN_AND_SIGNATURE";
    readonly Signature: "SIGNATURE";
    readonly OnDevice: "ON_DEVICE";
    readonly None: "NONE";
};
export declare type CardVerificationMethod = typeof CardVerificationMethod[keyof typeof CardVerificationMethod];
/**
 *
 * @export
 * @enum {string}
 */
export declare const CardVerificationResult: {
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
    readonly Unknown: "UNKNOWN";
};
export declare type CardVerificationResult = typeof CardVerificationResult[keyof typeof CardVerificationResult];
/**
 *
 * @export
 * @interface CashPaymentDetails
 */
export interface CashPaymentDetails {
    /**
     *
     * @type {Money}
     * @memberof CashPaymentDetails
     */
    'buyerSuppliedMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof CashPaymentDetails
     */
    'changeBackMoney'?: Money;
}
/**
 *
 * @export
 * @interface CheckoutLineItemCreationParam
 */
export interface CheckoutLineItemCreationParam {
    /**
     * Item can be created inline if neccessary
     * @type {string | ItemCreationParams}
     * @memberof CheckoutLineItemCreationParam
     */
    'item': string | ItemCreationParams;
    /**
     *
     * @type {number}
     * @memberof CheckoutLineItemCreationParam
     */
    'quantity': number;
    /**
     *
     * @type {AdjustableQuantity}
     * @memberof CheckoutLineItemCreationParam
     */
    'adjustableQuantity'?: AdjustableQuantity;
}
/**
 *
 * @export
 * @interface CheckoutPageOptions
 */
export interface CheckoutPageOptions {
    /**
     *
     * @type {CaptureMethod}
     * @memberof CheckoutPageOptions
     */
    'captureMethod': CaptureMethod;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof CheckoutPageOptions
     */
    'successUrl'?: string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof CheckoutPageOptions
     */
    'cancelUrl'?: string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof CheckoutPageOptions
     */
    'expireUrl'?: string;
    /**
     *
     * @type {object}
     * @memberof CheckoutPageOptions
     */
    'enableGroupPayments'?: object;
    /**
     *
     * @type {object}
     * @memberof CheckoutPageOptions
     */
    'enableTips'?: object;
    /**
     *
     * @type {object}
     * @memberof CheckoutPageOptions
     */
    'enableDiscounts'?: object;
    /**
     * Will pre-apply an array of discount codes Discounts have to be enabled first.
     * @type {Array<string>}
     * @memberof CheckoutPageOptions
     */
    'discountCodes'?: Array<string>;
    /**
     *
     * @type {Array<PaymentMethod>}
     * @memberof CheckoutPageOptions
     */
    'paymentMethods'?: Array<PaymentMethod>;
    /**
     *
     * @type {CheckoutStyle}
     * @memberof CheckoutPageOptions
     */
    'style'?: CheckoutStyle;
    /**
     *
     * @type {object}
     * @memberof CheckoutPageOptions
     */
    'showEditItemsPage'?: object;
}
/**
 *
 * @export
 * @interface CheckoutSession
 */
export interface CheckoutSession {
    /**
     *
     * @type {string}
     * @memberof CheckoutSession
     */
    'id': string;
    /**
     *
     * @type {CheckoutStatus}
     * @memberof CheckoutSession
     */
    'status': CheckoutStatus;
    /**
     *
     * @type {string}
     * @memberof CheckoutSession
     */
    'expirationDate': string;
    /**
     * User will populate data in checkout session if provided
     * @type {string}
     * @memberof CheckoutSession
     */
    'customerId'?: string;
    /**
     * The order associated with the checkout session
     * @type {string}
     * @memberof CheckoutSession
     */
    'orderId': string;
    /**
     * The payment associated with the checkout session Could be either single payment or group payment
     * @type {string}
     * @memberof CheckoutSession
     */
    'paymentId'?: string;
    /**
     *
     * @type {string}
     * @memberof CheckoutSession
     */
    'groupPaymentId'?: string;
    /**
     *
     * @type {CheckoutPageOptions}
     * @memberof CheckoutSession
     */
    'checkoutOptions': CheckoutPageOptions;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof CheckoutSession
     */
    'url': string;
    /**
     *
     * @type {string}
     * @memberof CheckoutSession
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof CheckoutSession
     */
    'updatedAt'?: string;
    /**
     *
     * @type {number}
     * @memberof CheckoutSession
     */
    'version'?: number;
    /**
     *
     * @type {string}
     * @memberof CheckoutSession
     */
    'referenceId'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof CheckoutSession
     */
    'metaData'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface CheckoutSessionCreationParams
 */
export interface CheckoutSessionCreationParams {
    /**
     *
     * @type {Array<CheckoutLineItemCreationParam>}
     * @memberof CheckoutSessionCreationParams
     */
    'lineItemParams': Array<CheckoutLineItemCreationParam>;
    /**
     *
     * @type {string}
     * @memberof CheckoutSessionCreationParams
     */
    'referenceId'?: string;
    /**
     *
     * @type {CustomerCreationParams | string}
     * @memberof CheckoutSessionCreationParams
     */
    'customer'?: CustomerCreationParams | string;
    /**
     *
     * @type {string}
     * @memberof CheckoutSessionCreationParams
     */
    'expirationDate'?: string;
    /**
     *
     * @type {CheckoutPageOptions}
     * @memberof CheckoutSessionCreationParams
     */
    'checkoutPageOptions': CheckoutPageOptions;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof CheckoutSessionCreationParams
     */
    'metaData'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const CheckoutStatus: {
    readonly Expired: "EXPIRED";
    readonly Cancelled: "CANCELLED";
    readonly Pending: "PENDING";
};
export declare type CheckoutStatus = typeof CheckoutStatus[keyof typeof CheckoutStatus];
/**
 *
 * @export
 * @interface CheckoutStyle
 */
export interface CheckoutStyle {
    /**
     *
     * @type {string}
     * @memberof CheckoutStyle
     */
    'secondaryColor': string;
    /**
     *
     * @type {string}
     * @memberof CheckoutStyle
     */
    'primaryColor': string;
}
/**
 *
 * @export
 * @interface ClientCreationParams
 */
export interface ClientCreationParams {
    /**
     *
     * @type {string}
     * @memberof ClientCreationParams
     */
    'name': string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof ClientCreationParams
     */
    'logoUrl'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ClientCreationParams
     */
    'redirectUris'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ClientCreationParams
     */
    'scopes': Array<string>;
}
/**
 * Client response will automatically give bool values determining if client is verified or not
 * @export
 * @interface ClientResponse
 */
export interface ClientResponse {
    /**
     *
     * @type {string}
     * @memberof ClientResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ClientResponse
     */
    'name': string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof ClientResponse
     */
    'logoUrl'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ClientResponse
     */
    'redirectUris'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ClientResponse
     */
    'secretKey': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ClientResponse
     */
    'scopes': Array<string>;
    /**
     *
     * @type {string}
     * @memberof ClientResponse
     */
    'ownerId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ClientResponse
     */
    'verified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof ClientResponse
     */
    'trusted': boolean;
}
/**
 *
 * @export
 * @interface ClientResponseAllOf
 */
export interface ClientResponseAllOf {
    /**
     *
     * @type {boolean}
     * @memberof ClientResponseAllOf
     */
    'verified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof ClientResponseAllOf
     */
    'trusted': boolean;
}
/**
 *
 * @export
 * @interface ConnectRecord
 */
export interface ConnectRecord {
    /**
     *
     * @type {string}
     * @memberof ConnectRecord
     */
    'accountId': string;
    /**
     *
     * @type {string}
     * @memberof ConnectRecord
     */
    'service': string;
    /**
     *
     * @type {string}
     * @memberof ConnectRecord
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof ConnectRecord
     */
    'refreshToken': string;
    /**
     *
     * @type {string}
     * @memberof ConnectRecord
     */
    'expiresAt': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const Country: {
    readonly Af: "AF";
    readonly Ax: "AX";
    readonly Al: "AL";
    readonly Dz: "DZ";
    readonly As: "AS";
    readonly Ad: "AD";
    readonly Ao: "AO";
    readonly Ai: "AI";
    readonly Aq: "AQ";
    readonly Ag: "AG";
    readonly Ar: "AR";
    readonly Am: "AM";
    readonly Aw: "AW";
    readonly Au: "AU";
    readonly At: "AT";
    readonly Az: "AZ";
    readonly Bs: "BS";
    readonly Bh: "BH";
    readonly Bd: "BD";
    readonly Bb: "BB";
    readonly By: "BY";
    readonly Be: "BE";
    readonly Bz: "BZ";
    readonly Bj: "BJ";
    readonly Bm: "BM";
    readonly Bt: "BT";
    readonly Bo: "BO";
    readonly Bq: "BQ";
    readonly Ba: "BA";
    readonly Bw: "BW";
    readonly Bv: "BV";
    readonly Br: "BR";
    readonly Io: "IO";
    readonly Bn: "BN";
    readonly Bg: "BG";
    readonly Bf: "BF";
    readonly Bi: "BI";
    readonly Kh: "KH";
    readonly Cm: "CM";
    readonly Ca: "CA";
    readonly Cv: "CV";
    readonly Ky: "KY";
    readonly Cf: "CF";
    readonly Td: "TD";
    readonly Cl: "CL";
    readonly Cn: "CN";
    readonly Cx: "CX";
    readonly Cc: "CC";
    readonly Co: "CO";
    readonly Km: "KM";
    readonly Cg: "CG";
    readonly Cd: "CD";
    readonly Ck: "CK";
    readonly Cr: "CR";
    readonly Ci: "CI";
    readonly Hr: "HR";
    readonly Cu: "CU";
    readonly Cw: "CW";
    readonly Cy: "CY";
    readonly Cz: "CZ";
    readonly Dk: "DK";
    readonly Dj: "DJ";
    readonly Dm: "DM";
    readonly Do: "DO";
    readonly Ec: "EC";
    readonly Eg: "EG";
    readonly Sv: "SV";
    readonly Gq: "GQ";
    readonly Er: "ER";
    readonly Ee: "EE";
    readonly Et: "ET";
    readonly Fk: "FK";
    readonly Fo: "FO";
    readonly Fj: "FJ";
    readonly Fi: "FI";
    readonly Fr: "FR";
    readonly Gf: "GF";
    readonly Pf: "PF";
    readonly Tf: "TF";
    readonly Ga: "GA";
    readonly Gm: "GM";
    readonly Ge: "GE";
    readonly De: "DE";
    readonly Gh: "GH";
    readonly Gi: "GI";
    readonly Gr: "GR";
    readonly Gl: "GL";
    readonly Gd: "GD";
    readonly Gp: "GP";
    readonly Gu: "GU";
    readonly Gt: "GT";
    readonly Gg: "GG";
    readonly Gn: "GN";
    readonly Gw: "GW";
    readonly Gy: "GY";
    readonly Ht: "HT";
    readonly Hm: "HM";
    readonly Va: "VA";
    readonly Hn: "HN";
    readonly Hk: "HK";
    readonly Hu: "HU";
    readonly Is: "IS";
    readonly In: "IN";
    readonly Id: "ID";
    readonly Ir: "IR";
    readonly Iq: "IQ";
    readonly Ie: "IE";
    readonly Im: "IM";
    readonly Il: "IL";
    readonly It: "IT";
    readonly Jm: "JM";
    readonly Jp: "JP";
    readonly Je: "JE";
    readonly Jo: "JO";
    readonly Kz: "KZ";
    readonly Ke: "KE";
    readonly Ki: "KI";
    readonly Kr: "KR";
    readonly Kp: "KP";
    readonly Kw: "KW";
    readonly Kg: "KG";
    readonly La: "LA";
    readonly Lv: "LV";
    readonly Lb: "LB";
    readonly Ls: "LS";
    readonly Lr: "LR";
    readonly Ly: "LY";
    readonly Li: "LI";
    readonly Lt: "LT";
    readonly Lu: "LU";
    readonly Mo: "MO";
    readonly Mk: "MK";
    readonly Mg: "MG";
    readonly Mw: "MW";
    readonly My: "MY";
    readonly Mv: "MV";
    readonly Ml: "ML";
    readonly Mt: "MT";
    readonly Mh: "MH";
    readonly Mq: "MQ";
    readonly Mr: "MR";
    readonly Mu: "MU";
    readonly Yt: "YT";
    readonly Mx: "MX";
    readonly Fm: "FM";
    readonly Md: "MD";
    readonly Mc: "MC";
    readonly Mn: "MN";
    readonly Me: "ME";
    readonly Ms: "MS";
    readonly Ma: "MA";
    readonly Mz: "MZ";
    readonly Mm: "MM";
    readonly Na: "NA";
    readonly Nr: "NR";
    readonly Np: "NP";
    readonly Nl: "NL";
    readonly Nc: "NC";
    readonly Nz: "NZ";
    readonly Ni: "NI";
    readonly Ne: "NE";
    readonly Ng: "NG";
    readonly Nu: "NU";
    readonly Nf: "NF";
    readonly Mp: "MP";
    readonly False: "false";
    readonly Om: "OM";
    readonly Pk: "PK";
    readonly Pw: "PW";
    readonly Ps: "PS";
    readonly Pa: "PA";
    readonly Pg: "PG";
    readonly Py: "PY";
    readonly Pe: "PE";
    readonly Ph: "PH";
    readonly Pn: "PN";
    readonly Pl: "PL";
    readonly Pt: "PT";
    readonly Pr: "PR";
    readonly Qa: "QA";
    readonly Re: "RE";
    readonly Ro: "RO";
    readonly Ru: "RU";
    readonly Rw: "RW";
    readonly Bl: "BL";
    readonly Sh: "SH";
    readonly Kn: "KN";
    readonly Lc: "LC";
    readonly Mf: "MF";
    readonly Pm: "PM";
    readonly Vc: "VC";
    readonly Ws: "WS";
    readonly Sm: "SM";
    readonly St: "ST";
    readonly Sa: "SA";
    readonly Sn: "SN";
    readonly Rs: "RS";
    readonly Sc: "SC";
    readonly Sl: "SL";
    readonly Sg: "SG";
    readonly Sx: "SX";
    readonly Sk: "SK";
    readonly Si: "SI";
    readonly Sb: "SB";
    readonly So: "SO";
    readonly Za: "ZA";
    readonly Gs: "GS";
    readonly Ss: "SS";
    readonly Es: "ES";
    readonly Lk: "LK";
    readonly Sd: "SD";
    readonly Sr: "SR";
    readonly Sj: "SJ";
    readonly Sz: "SZ";
    readonly Se: "SE";
    readonly Ch: "CH";
    readonly Sy: "SY";
    readonly Tw: "TW";
    readonly Tj: "TJ";
    readonly Tz: "TZ";
    readonly Th: "TH";
    readonly Tl: "TL";
    readonly Tg: "TG";
    readonly Tk: "TK";
    readonly To: "TO";
    readonly Tt: "TT";
    readonly Tn: "TN";
    readonly Tr: "TR";
    readonly Tm: "TM";
    readonly Tc: "TC";
    readonly Tv: "TV";
    readonly Ug: "UG";
    readonly Ua: "UA";
    readonly Ae: "AE";
    readonly Gb: "GB";
    readonly Us: "US";
    readonly Um: "UM";
    readonly Uy: "UY";
    readonly Uz: "UZ";
    readonly Vu: "VU";
    readonly Ve: "VE";
    readonly Vn: "VN";
    readonly Vg: "VG";
    readonly Vi: "VI";
    readonly Wf: "WF";
    readonly Eh: "EH";
    readonly Ye: "YE";
    readonly Zm: "ZM";
    readonly Zw: "ZW";
};
export declare type Country = typeof Country[keyof typeof Country];
/**
 *
 * @export
 * @interface CreateGroupPaymentRequest
 */
export interface CreateGroupPaymentRequest {
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'idempotencyKey': string;
    /**
     * Can either be a customerId or customer object
     * @type {string | CustomerCreationParams}
     * @memberof CreateGroupPaymentRequest
     */
    'customer': string | CustomerCreationParams;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'groupId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'orderId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'checkoutId'?: string;
    /**
     *
     * @type {SplitType}
     * @memberof CreateGroupPaymentRequest
     */
    'splitType'?: SplitType;
    /**
     *
     * @type {number}
     * @memberof CreateGroupPaymentRequest
     */
    'splitAllocation'?: number;
    /**
     *
     * @type {{ [key: string]: Money; }}
     * @memberof CreateGroupPaymentRequest
     */
    'customAllocation'?: {
        [key: string]: Money;
    };
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof CreateGroupPaymentRequest
     */
    'itemAllocation'?: {
        [key: string]: Array<string>;
    };
    /**
     *
     * @type {Money}
     * @memberof CreateGroupPaymentRequest
     */
    'amountMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof CreateGroupPaymentRequest
     */
    'tipMoney'?: Money;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'expirationDate'?: string;
    /**
     *
     * @type {Address}
     * @memberof CreateGroupPaymentRequest
     */
    'shippingAddress'?: Address;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'statementDescriptionIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'note'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateGroupPaymentRequest
     */
    'referenceId'?: string;
}
/**
 *
 * @export
 * @interface CreatePaymentRequest
 */
export interface CreatePaymentRequest {
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'orderId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'paymentToken': string;
    /**
     *
     * @type {Money}
     * @memberof CreatePaymentRequest
     */
    'amountMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof CreatePaymentRequest
     */
    'tipMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof CreatePaymentRequest
     */
    'sellerFee'?: Money;
    /**
     *
     * @type {Address}
     * @memberof CreatePaymentRequest
     */
    'billingAddress'?: Address;
    /**
     *
     * @type {Address}
     * @memberof CreatePaymentRequest
     */
    'shippingAddress'?: Address;
    /**
     *
     * @type {boolean}
     * @memberof CreatePaymentRequest
     */
    'autocomplete'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'expirationDate'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'verificationToken'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'statementDescriptionIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'note'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    'referenceId'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const Currency: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byn: "BYN";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mru: "MRU";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Srd: "SRD";
    readonly Ssp: "SSP";
    readonly Stn: "STN";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Ves: "VES";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwl: "ZWL";
};
export declare type Currency = typeof Currency[keyof typeof Currency];
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'lastName'?: string;
    /**
     * Email address. See [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
     * @type {string}
     * @memberof Customer
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'phoneNumber'?: string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof Customer
     */
    'imageUrl'?: string;
    /**
     *
     * @type {Address}
     * @memberof Customer
     */
    'address'?: Address;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'language'?: string;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface CustomerCreationParams
 */
export interface CustomerCreationParams {
    /**
     *
     * @type {string}
     * @memberof CustomerCreationParams
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof CustomerCreationParams
     */
    'lastName'?: string;
    /**
     * Email address. See [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
     * @type {string}
     * @memberof CustomerCreationParams
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CustomerCreationParams
     */
    'phoneNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerCreationParams
     */
    'language'?: string;
}
/**
 *
 * @export
 * @interface DeviceDetails
 */
export interface DeviceDetails {
    /**
     *
     * @type {string}
     * @memberof DeviceDetails
     */
    'deviceId'?: string;
    /**
     *
     * @type {string}
     * @memberof DeviceDetails
     */
    'deviceInstallationId'?: string;
    /**
     *
     * @type {string}
     * @memberof DeviceDetails
     */
    'deviceName'?: string;
}
/**
 *
 * @export
 * @interface Discount
 */
export interface Discount {
    /**
     *
     * @type {string}
     * @memberof Discount
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Discount
     */
    'code': string;
    /**
     *
     * @type {Money}
     * @memberof Discount
     */
    'amountMoney': Money;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const DisplayType: {
    readonly Page: "page";
    readonly Popup: "popup";
    readonly Touch: "touch";
    readonly Wap: "wap";
};
export declare type DisplayType = typeof DisplayType[keyof typeof DisplayType];
/**
 *
 * @export
 * @interface Dispute
 */
export interface Dispute {
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'paymentId': string;
    /**
     *
     * @type {Money}
     * @memberof Dispute
     */
    'amountMoney': Money;
    /**
     *
     * @type {DisputeReason}
     * @memberof Dispute
     */
    'reason': DisputeReason;
    /**
     *
     * @type {DisputeStatus}
     * @memberof Dispute
     */
    'status': DisputeStatus;
    /**
     *
     * @type {Array<string>}
     * @memberof Dispute
     */
    'evidenceIds'?: Array<string>;
    /**
     *
     * @type {CardBrand}
     * @memberof Dispute
     */
    'cardBrand'?: CardBrand;
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'brandDisputeId'?: string;
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'dueAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'reportedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'locationId'?: string;
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Dispute
     */
    'updatedAt'?: string;
    /**
     *
     * @type {number}
     * @memberof Dispute
     */
    'version'?: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const DisputeReason: {
    readonly AmountDiffers: "AMOUNT_DIFFERS";
    readonly Cancelled: "CANCELLED";
    readonly Duplicate: "DUPLICATE";
    readonly NoKnowledge: "NO_KNOWLEDGE";
    readonly NotAsDescribed: "NOT_AS_DESCRIBED";
    readonly NotReceived: "NOT_RECEIVED";
    readonly PaidByOtherMeans: "PAID_BY_OTHER_MEANS";
    readonly CustomerRequestsCredit: "CUSTOMER_REQUESTS_CREDIT";
    readonly EmvLiabilityShift: "EMV_LIABILITY_SHIFT";
};
export declare type DisputeReason = typeof DisputeReason[keyof typeof DisputeReason];
/**
 *
 * @export
 * @enum {string}
 */
export declare const DisputeStatus: {
    readonly Unknown: "UNKNOWN";
    readonly InquiryEvidenceRequired: "INQUIRY_EVIDENCE_REQUIRED";
    readonly InquiryProcessing: "INQUIRY_PROCESSING";
    readonly InquiryClosed: "INQUIRY_CLOSED";
    readonly EvidenceRequired: "EVIDENCE_REQUIRED";
    readonly Processing: "PROCESSING";
    readonly Won: "WON";
    readonly Lost: "LOST";
    readonly Accepted: "ACCEPTED";
    readonly WaitingThirdParty: "WAITING_THIRD_PARTY";
};
export declare type DisputeStatus = typeof DisputeStatus[keyof typeof DisputeStatus];
/**
 *
 * @export
 * @interface ETSITokenResponse
 */
export interface ETSITokenResponse {
    /**
     *
     * @type {string}
     * @memberof ETSITokenResponse
     */
    'nfv_token'?: string;
}
/**
 *
 * @export
 * @interface Email
 */
export interface Email {
    /**
     *
     * @type {string}
     * @memberof Email
     */
    'id': string;
    /**
     *
     * @type {Array<string>}
     * @memberof Email
     */
    'to': Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Email
     */
    'cc'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Email
     */
    'bcc'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Email
     */
    'subject': string;
    /**
     *
     * @type {string}
     * @memberof Email
     */
    'html'?: string;
    /**
     *
     * @type {string}
     * @memberof Email
     */
    'text'?: string;
    /**
     *
     * @type {Array<Attachment>}
     * @memberof Email
     */
    'attachment'?: Array<Attachment>;
    /**
     *
     * @type {string}
     * @memberof Email
     */
    'referenceId'?: string;
    /**
     *
     * @type {string}
     * @memberof Email
     */
    'templateName'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Email
     */
    'variables'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Email
     */
    'metaData'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface EmailCreationParams
 */
export interface EmailCreationParams {
    /**
     *
     * @type {Array<string>}
     * @memberof EmailCreationParams
     */
    'to': Array<string>;
    /**
     *
     * @type {string}
     * @memberof EmailCreationParams
     */
    'subject': string;
    /**
     *
     * @type {Array<string>}
     * @memberof EmailCreationParams
     */
    'cc'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof EmailCreationParams
     */
    'bcc'?: Array<string>;
    /**
     *
     * @type {Array<Attachment>}
     * @memberof EmailCreationParams
     */
    'attachment'?: Array<Attachment>;
    /**
     *
     * @type {string}
     * @memberof EmailCreationParams
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof EmailCreationParams
     */
    'html': string;
    /**
     *
     * @type {string}
     * @memberof EmailCreationParams
     */
    'templateName': string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof EmailCreationParams
     */
    'variables'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface ExternalPaymentDetails
 */
export interface ExternalPaymentDetails {
    /**
     *
     * @type {string}
     * @memberof ExternalPaymentDetails
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof ExternalPaymentDetails
     */
    'source': string;
    /**
     *
     * @type {string}
     * @memberof ExternalPaymentDetails
     */
    'sourceId'?: string;
    /**
     *
     * @type {Money}
     * @memberof ExternalPaymentDetails
     */
    'sourceFeeMoney'?: Money;
}
/**
 *
 * @export
 * @interface Group
 */
export interface Group {
    /**
     *
     * @type {string}
     * @memberof Group
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Group
     */
    'ownerId': string;
    /**
     *
     * @type {Array<string>}
     * @memberof Group
     */
    'memberIds': Array<string>;
    /**
     *
     * @type {string}
     * @memberof Group
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Group
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Group
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface GroupCreationParams
 */
export interface GroupCreationParams {
    /**
     *
     * @type {string}
     * @memberof GroupCreationParams
     */
    'ownerId': string;
    /**
     *
     * @type {Array<string>}
     * @memberof GroupCreationParams
     */
    'memberIds'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof GroupCreationParams
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface GroupPaymentRecord
 */
export interface GroupPaymentRecord {
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'ownerId': string;
    /**
     *
     * @type {PaymentStatus}
     * @memberof GroupPaymentRecord
     */
    'status': PaymentStatus;
    /**
     *
     * @type {Array<string>}
     * @memberof GroupPaymentRecord
     */
    'memberIds': Array<string>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof GroupPaymentRecord
     */
    'memberPayments': {
        [key: string]: string;
    };
    /**
     *
     * @type {number}
     * @memberof GroupPaymentRecord
     */
    'splitAllocation'?: number;
    /**
     *
     * @type {SplitType}
     * @memberof GroupPaymentRecord
     */
    'splitType': SplitType;
    /**
     *
     * @type {{ [key: string]: Money; }}
     * @memberof GroupPaymentRecord
     */
    'customAllocation'?: {
        [key: string]: Money;
    };
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupPaymentRecord
     */
    'itemAllocation'?: {
        [key: string]: Array<string>;
    };
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'groupId'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'orderId'?: string;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRecord
     */
    'totalMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRecord
     */
    'amountMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRecord
     */
    'tipMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRecord
     */
    'approvedMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRecord
     */
    'refundedMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRecord
     */
    'groupAppFee'?: Money;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRecord
     */
    'totalAppFees'?: Money;
    /**
     *
     * @type {Array<ProcessingFee>}
     * @memberof GroupPaymentRecord
     */
    'processingFees'?: Array<ProcessingFee>;
    /**
     *
     * @type {Array<string>}
     * @memberof GroupPaymentRecord
     */
    'refundIds'?: Array<string>;
    /**
     *
     * @type {Address}
     * @memberof GroupPaymentRecord
     */
    'shippingAddress'?: Address;
    /**
     * If the total payment is not made up by the group members by this date then the transaction will be cancelled. Default 7 days.
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'expirationDate'?: string;
    /**
     *
     * @type {RiskEvaluation}
     * @memberof GroupPaymentRecord
     */
    'riskEvaluation'?: RiskEvaluation;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'statementDescriptionIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'note'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'referenceId'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof GroupPaymentRecord
     */
    'metaData'?: {
        [key: string]: string;
    };
    /**
     * The inviteUrl is only generated when the group payment is fully hosted by hands in
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'url'?: string;
    /**
     * The message is shown to everyone in the group when fully hosted by hands in
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRecord
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof GroupPaymentRecord
     */
    'version': number;
}
/**
 *
 * @export
 * @interface GroupPaymentRefundRequest
 */
export interface GroupPaymentRefundRequest {
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRefundRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentRefundRequest
     */
    'appFee'?: Money;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentRefundRequest
     */
    'reason'?: string;
}
/**
 *
 * @export
 * @interface GroupPaymentUpdateParams
 */
export interface GroupPaymentUpdateParams {
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'groupId'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'orderId'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'checkoutId'?: string;
    /**
     *
     * @type {SplitType}
     * @memberof GroupPaymentUpdateParams
     */
    'splitType'?: SplitType;
    /**
     *
     * @type {number}
     * @memberof GroupPaymentUpdateParams
     */
    'splitAllocation'?: number;
    /**
     *
     * @type {{ [key: string]: Money; }}
     * @memberof GroupPaymentUpdateParams
     */
    'customAllocation'?: {
        [key: string]: Money;
    };
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupPaymentUpdateParams
     */
    'itemAllocation'?: {
        [key: string]: Array<string>;
    };
    /**
     *
     * @type {Money}
     * @memberof GroupPaymentUpdateParams
     */
    'amountMoney'?: Money;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'expirationDate'?: string;
    /**
     *
     * @type {Address}
     * @memberof GroupPaymentUpdateParams
     */
    'shippingAddress'?: Address;
    /**
     * If this is set to true, the group payment will be completed as soon as the total amount is made up  Defaults to true.
     * @type {boolean}
     * @memberof GroupPaymentUpdateParams
     */
    'autocomplete'?: boolean;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'statementDescriptionIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'note'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupPaymentUpdateParams
     */
    'referenceId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof GroupPaymentUpdateParams
     */
    'emailNotification'?: boolean;
}
/**
 *
 * @export
 * @interface GroupPaymentUpdateParamsAllOf
 */
export interface GroupPaymentUpdateParamsAllOf {
    /**
     *
     * @type {boolean}
     * @memberof GroupPaymentUpdateParamsAllOf
     */
    'emailNotification'?: boolean;
}
/**
 *
 * @export
 * @interface HtmlEmailCreationParams
 */
export interface HtmlEmailCreationParams {
    /**
     *
     * @type {Array<string>}
     * @memberof HtmlEmailCreationParams
     */
    'to': Array<string>;
    /**
     *
     * @type {string}
     * @memberof HtmlEmailCreationParams
     */
    'subject': string;
    /**
     *
     * @type {Array<string>}
     * @memberof HtmlEmailCreationParams
     */
    'cc'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof HtmlEmailCreationParams
     */
    'bcc'?: Array<string>;
    /**
     *
     * @type {Array<Attachment>}
     * @memberof HtmlEmailCreationParams
     */
    'attachment'?: Array<Attachment>;
    /**
     *
     * @type {string}
     * @memberof HtmlEmailCreationParams
     */
    'html': string;
    /**
     *
     * @type {string}
     * @memberof HtmlEmailCreationParams
     */
    'text'?: string;
    /**
     *
     * @type {string}
     * @memberof HtmlEmailCreationParams
     */
    'templateName'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof HtmlEmailCreationParams
     */
    'variables'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface IESGTokenResponse
 */
export interface IESGTokenResponse {
    /**
     *
     * @type {string}
     * @memberof IESGTokenResponse
     */
    'issued_token_type'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const IETFResponseType: {
    readonly Code: "code";
    readonly Token: "token";
};
export declare type IETFResponseType = typeof IETFResponseType[keyof typeof IETFResponseType];
/**
 *
 * @export
 * @interface IETFTokenResponse
 */
export interface IETFTokenResponse {
    /**
     *
     * @type {Array<string>}
     * @memberof IETFTokenResponse
     */
    'scope'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof IETFTokenResponse
     */
    'access_token'?: string;
    /**
     *
     * @type {string}
     * @memberof IETFTokenResponse
     */
    'token_type'?: string;
    /**
     *
     * @type {number}
     * @memberof IETFTokenResponse
     */
    'expires_in'?: number;
    /**
     *
     * @type {string}
     * @memberof IETFTokenResponse
     */
    'refresh_token'?: string;
    /**
     *
     * @type {string}
     * @memberof IETFTokenResponse
     */
    'ace_profile'?: string;
    /**
     *
     * @type {string}
     * @memberof IETFTokenResponse
     */
    'rs_cnf'?: string;
    /**
     *
     * @type {string}
     * @memberof IETFTokenResponse
     */
    'cnf'?: string;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineObject1
     */
    'scopes'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject1
     */
    'resend'?: boolean;
}
/**
 *
 * @export
 * @interface Item
 */
export interface Item {
    /**
     *
     * @type {string}
     * @memberof Item
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    'sku'?: string;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    'name': string;
    /**
     *
     * @type {Money}
     * @memberof Item
     */
    'amountMoney': Money;
    /**
     * Key-value pairs that help to differentiate variants
     * @type {{ [key: string]: string; }}
     * @memberof Item
     */
    'attributes'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {ItemOrderDetails}
     * @memberof Item
     */
    'orderDetails'?: ItemOrderDetails;
    /**
     *
     * @type {ItemInventoryDetails}
     * @memberof Item
     */
    'inventoryDetails'?: ItemInventoryDetails;
    /**
     * Max 10 images per item. Default image is the first in array.
     * @type {Array<string>}
     * @memberof Item
     */
    'imageUrls'?: Array<string>;
    /**
     * 300 word description of the item.
     * @type {string}
     * @memberof Item
     */
    'description'?: string;
    /**
     * referenceId for merchant to use for internal system
     * @type {string}
     * @memberof Item
     */
    'referenceId'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Item
     */
    'metaData'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof Item
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    'updatedAt'?: string;
    /**
     *
     * @type {number}
     * @memberof Item
     */
    'version'?: number;
}
/**
 *
 * @export
 * @interface ItemCreationParams
 */
export interface ItemCreationParams {
    /**
     *
     * @type {string}
     * @memberof ItemCreationParams
     */
    'sku'?: string;
    /**
     *
     * @type {string}
     * @memberof ItemCreationParams
     */
    'name': string;
    /**
     *
     * @type {Money}
     * @memberof ItemCreationParams
     */
    'amountMoney': Money;
    /**
     * Key-value pairs that help to differentiate variants
     * @type {{ [key: string]: string; }}
     * @memberof ItemCreationParams
     */
    'attributes'?: {
        [key: string]: string;
    };
    /**
     * Max of 10 images per item. The first will always be the default.
     * @type {Array<string>}
     * @memberof ItemCreationParams
     */
    'imageUrls'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ItemCreationParams
     */
    'description'?: string;
    /**
     *
     * @type {ItemCreationParamsOrderDetails}
     * @memberof ItemCreationParams
     */
    'orderDetails'?: ItemCreationParamsOrderDetails;
    /**
     *
     * @type {ItemCreationParamsInventoryDetails}
     * @memberof ItemCreationParams
     */
    'inventoryDetails'?: ItemCreationParamsInventoryDetails;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ItemCreationParams
     */
    'metaData'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof ItemCreationParams
     */
    'referenceId'?: string;
}
/**
 *
 * @export
 * @interface ItemCreationParamsInventoryDetails
 */
export interface ItemCreationParamsInventoryDetails {
    /**
     *
     * @type {number}
     * @memberof ItemCreationParamsInventoryDetails
     */
    'unitsAvailable'?: number;
    /**
     * This will be shown on your Hands In catalogue
     * @type {string}
     * @memberof ItemCreationParamsInventoryDetails
     */
    'unitType'?: string;
}
/**
 *
 * @export
 * @interface ItemCreationParamsOrderDetails
 */
export interface ItemCreationParamsOrderDetails {
    /**
     * This will default to the units available if not provided
     * @type {number}
     * @memberof ItemCreationParamsOrderDetails
     */
    'maxUnitsPerOrder'?: number;
    /**
     * This will default to 0 if not provided
     * @type {number}
     * @memberof ItemCreationParamsOrderDetails
     */
    'minUnitsPerOrder'?: number;
    /**
     * Set to true if the item can be shipped
     * @type {boolean}
     * @memberof ItemCreationParamsOrderDetails
     */
    'isShippable'?: boolean;
}
/**
 *
 * @export
 * @interface ItemInventoryDetails
 */
export interface ItemInventoryDetails {
    /**
     *
     * @type {number}
     * @memberof ItemInventoryDetails
     */
    'unitsAvailable'?: number;
    /**
     * This will be shown on your Hands In and checkout pages
     * @type {string}
     * @memberof ItemInventoryDetails
     */
    'unitType'?: string;
}
/**
 *
 * @export
 * @interface ItemListParams
 */
export interface ItemListParams {
    /**
     *
     * @type {Array<string>}
     * @memberof ItemListParams
     */
    'itemIds': Array<string>;
}
/**
 * Details used by the ordering service to determine limitations for orders
 * @export
 * @interface ItemOrderDetails
 */
export interface ItemOrderDetails {
    /**
     * Set to true if item is must be shipped out
     * @type {boolean}
     * @memberof ItemOrderDetails
     */
    'isShippable'?: boolean;
}
/**
 *
 * @export
 * @interface ItemUpdateParams
 */
export interface ItemUpdateParams {
    /**
     *
     * @type {string}
     * @memberof ItemUpdateParams
     */
    'sku'?: string;
    /**
     *
     * @type {string}
     * @memberof ItemUpdateParams
     */
    'name': string;
    /**
     *
     * @type {Money}
     * @memberof ItemUpdateParams
     */
    'amountMoney': Money;
    /**
     * Key-value pairs that help to differentiate variants
     * @type {{ [key: string]: string; }}
     * @memberof ItemUpdateParams
     */
    'attributes'?: {
        [key: string]: string;
    };
    /**
     * Max of 10 images per item. The first will always be the default.
     * @type {Array<string>}
     * @memberof ItemUpdateParams
     */
    'imageUrls'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ItemUpdateParams
     */
    'description'?: string;
    /**
     *
     * @type {ItemCreationParamsOrderDetails}
     * @memberof ItemUpdateParams
     */
    'orderDetails'?: ItemCreationParamsOrderDetails;
    /**
     *
     * @type {ItemCreationParamsInventoryDetails}
     * @memberof ItemUpdateParams
     */
    'inventoryDetails'?: ItemCreationParamsInventoryDetails;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ItemUpdateParams
     */
    'metaData'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof ItemUpdateParams
     */
    'referenceId'?: string;
    /**
     *
     * @type {number}
     * @memberof ItemUpdateParams
     */
    'atomicUnitChange'?: number;
}
/**
 *
 * @export
 * @interface JoinGroupPaymentRequest
 */
export interface JoinGroupPaymentRequest {
    /**
     *
     * @type {string}
     * @memberof JoinGroupPaymentRequest
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface KickGroupPaymentRequest
 */
export interface KickGroupPaymentRequest {
    /**
     *
     * @type {string}
     * @memberof KickGroupPaymentRequest
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof KickGroupPaymentRequest
     */
    'kickId': string;
}
/**
 *
 * @export
 * @interface LeaveGroupPaymentRequest
 */
export interface LeaveGroupPaymentRequest {
    /**
     *
     * @type {string}
     * @memberof LeaveGroupPaymentRequest
     */
    'customerId': string;
    /**
     *
     * @type {string}
     * @memberof LeaveGroupPaymentRequest
     */
    'newOwnerId'?: string;
}
/**
 *
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     *
     * @type {PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails}
     * @memberof LineItem
     */
    'item': PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails;
    /**
     *
     * @type {number}
     * @memberof LineItem
     */
    'quantity': number;
    /**
     *
     * @type {Money}
     * @memberof LineItem
     */
    'taxAmount'?: Money;
    /**
     *
     * @type {Array<Tax>}
     * @memberof LineItem
     */
    'taxes'?: Array<Tax>;
    /**
     *
     * @type {Money}
     * @memberof LineItem
     */
    'subtotalAmount': Money;
    /**
     *
     * @type {Money}
     * @memberof LineItem
     */
    'totalAmount': Money;
}
/**
 *
 * @export
 * @interface LineItemCreationParam
 */
export interface LineItemCreationParam {
    /**
     * Item can be created inline if neccessary
     * @type {string | ItemCreationParams}
     * @memberof LineItemCreationParam
     */
    'item': string | ItemCreationParams;
    /**
     *
     * @type {number}
     * @memberof LineItemCreationParam
     */
    'quantity': number;
}
/**
 *
 * @export
 * @interface LoginParams
 */
export interface LoginParams {
    /**
     * Email address. See [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
     * @type {string}
     * @memberof LoginParams
     */
    'email': string;
    /**
     * Password
     * @type {string}
     * @memberof LoginParams
     */
    'password': string;
    /**
     *
     * @type {Array<string>}
     * @memberof LoginParams
     */
    'scopes'?: Array<string>;
}
/**
 *
 * @export
 * @interface MerchantApiKeySummary
 */
export interface MerchantApiKeySummary {
    /**
     *
     * @type {string}
     * @memberof MerchantApiKeySummary
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof MerchantApiKeySummary
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof MerchantApiKeySummary
     */
    'merchantToken': string;
    /**
     *
     * @type {string}
     * @memberof MerchantApiKeySummary
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantApiKeySummary
     */
    'createdAt'?: string;
}
/**
 *
 * @export
 * @interface MerchantContactDetails
 */
export interface MerchantContactDetails {
    /**
     * Email address. See [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
     * @type {string}
     * @memberof MerchantContactDetails
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof MerchantContactDetails
     */
    'companyNumber'?: string;
    /**
     *
     * @type {Address}
     * @memberof MerchantContactDetails
     */
    'address'?: Address;
    /**
     *
     * @type {string}
     * @memberof MerchantContactDetails
     */
    'phoneNumber'?: string;
}
/**
 *
 * @export
 * @interface MerchantDTO
 */
export interface MerchantDTO {
    /**
     *
     * @type {string}
     * @memberof MerchantDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof MerchantDTO
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof MerchantDTO
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantDTO
     */
    'logoUrl'?: string;
    /**
     *
     * @type {MerchantContactDetails}
     * @memberof MerchantDTO
     */
    'contactDetails': MerchantContactDetails;
    /**
     *
     * @type {Array<MerchantApiKeySummary>}
     * @memberof MerchantDTO
     */
    'liveKeys': Array<MerchantApiKeySummary>;
    /**
     *
     * @type {Array<MerchantApiKeySummary>}
     * @memberof MerchantDTO
     */
    'testKeys': Array<MerchantApiKeySummary>;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof MerchantDTO
     */
    'team': {
        [key: string]: object;
    };
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof MerchantDTO
     */
    'invites'?: {
        [key: string]: object;
    };
    /**
     *
     * @type {Currency}
     * @memberof MerchantDTO
     */
    'defaultCurrency': Currency;
}
/**
 *
 * @export
 * @interface Money
 */
export interface Money {
    /**
     *
     * @type {number}
     * @memberof Money
     */
    'amount': number;
    /**
     *
     * @type {Currency}
     * @memberof Money
     */
    'currency': Currency;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const OAuthGrantType: {
    readonly AuthorizationCode: "authorization_code";
    readonly RefreshToken: "refresh_token";
    readonly ClientCredentials: "client_credentials";
};
export declare type OAuthGrantType = typeof OAuthGrantType[keyof typeof OAuthGrantType];
/**
 *
 * @export
 * @interface OAuthResponseType
 */
export interface OAuthResponseType {
}
/**
 *
 * @export
 * @interface OAuthTokenResponse
 */
export interface OAuthTokenResponse {
    /**
     *
     * @type {Array<string>}
     * @memberof OAuthTokenResponse
     */
    'scope'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'access_token'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'token_type'?: string;
    /**
     *
     * @type {number}
     * @memberof OAuthTokenResponse
     */
    'expires_in'?: number;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'refresh_token'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'ace_profile'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'rs_cnf'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'cnf'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'id_token'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'session_state'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'issued_token_type'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'nfv_token'?: string;
}
/**
 *
 * @export
 * @interface OpenIDTokenResponse
 */
export interface OpenIDTokenResponse {
    /**
     *
     * @type {string}
     * @memberof OpenIDTokenResponse
     */
    'id_token'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIDTokenResponse
     */
    'session_state'?: string;
}
/**
 *
 * @export
 * @interface OpenIdAddress
 */
export interface OpenIdAddress {
    /**
     *
     * @type {string}
     * @memberof OpenIdAddress
     */
    'country': string;
    /**
     *
     * @type {string}
     * @memberof OpenIdAddress
     */
    'postal_code': string;
    /**
     *
     * @type {string}
     * @memberof OpenIdAddress
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof OpenIdAddress
     */
    'locality': string;
    /**
     *
     * @type {string}
     * @memberof OpenIdAddress
     */
    'street_address': string;
    /**
     *
     * @type {string}
     * @memberof OpenIdAddress
     */
    'formatted': string;
}
/**
 *
 * @export
 * @interface OpenIdIdTokenData
 */
export interface OpenIdIdTokenData {
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'sub': string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'given_name'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'family_name'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'middle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'nickname'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'preferred_username'?: string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'picture'?: string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'profile'?: string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'website'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'gender'?: OpenIdIdTokenDataGenderEnum;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'birthdate'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'zoneinfo'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'locale'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'updated_at'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'phone_number'?: string;
    /**
     *
     * @type {boolean}
     * @memberof OpenIdIdTokenData
     */
    'phone_number_verified'?: boolean;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'email'?: string;
    /**
     *
     * @type {boolean}
     * @memberof OpenIdIdTokenData
     */
    'email_verified'?: boolean;
    /**
     *
     * @type {OpenIdAddress}
     * @memberof OpenIdIdTokenData
     */
    'address'?: OpenIdAddress;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'auth_time'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'nonce'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'acr'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'amr'?: string;
    /**
     *
     * @type {string}
     * @memberof OpenIdIdTokenData
     */
    'azp'?: string;
}
export declare const OpenIdIdTokenDataGenderEnum: {
    readonly Female: "female";
    readonly Male: "male";
};
export declare type OpenIdIdTokenDataGenderEnum = typeof OpenIdIdTokenDataGenderEnum[keyof typeof OpenIdIdTokenDataGenderEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const OpenIdResponseType: {
    readonly IdToken: "id_token";
    readonly IdTokenToken: "id_token token";
    readonly CodeIdTokenToken: "code id_token token";
    readonly CodeIdToken: "code id_token";
    readonly CodeToken: "code token";
    readonly None: "none";
};
export declare type OpenIdResponseType = typeof OpenIdResponseType[keyof typeof OpenIdResponseType];
/**
 *
 * @export
 * @interface Order
 */
export interface Order {
    /**
     *
     * @type {string}
     * @memberof Order
     */
    'id': string;
    /**
     *
     * @type {OrderStatus}
     * @memberof Order
     */
    'status': OrderStatus;
    /**
     *
     * @type {Array<LineItem>}
     * @memberof Order
     */
    'lineItems': Array<LineItem>;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    'totalMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    'subtotalMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    'discountMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof Order
     */
    'tipMoney'?: Money;
    /**
     *
     * @type {Array<Tax>}
     * @memberof Order
     */
    'taxes'?: Array<Tax>;
    /**
     *
     * @type {Array<Discount>}
     * @memberof Order
     */
    'discounts'?: Array<Discount>;
    /**
     *
     * @type {Address}
     * @memberof Order
     */
    'shippingAddress'?: Address;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Order
     */
    'metaData'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof Order
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    'updatedAt'?: string;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    'version'?: number;
}
/**
 *
 * @export
 * @interface OrderCreationParams
 */
export interface OrderCreationParams {
    /**
     *
     * @type {Array<LineItemCreationParam>}
     * @memberof OrderCreationParams
     */
    'lineItemParams': Array<LineItemCreationParam>;
    /**
     *
     * @type {Array<string>}
     * @memberof OrderCreationParams
     */
    'discountCodes'?: Array<string>;
    /**
     * Customer who is paying for the order
     * @type {string | CustomerCreationParams}
     * @memberof OrderCreationParams
     */
    'customer'?: string | CustomerCreationParams;
    /**
     *
     * @type {Address}
     * @memberof OrderCreationParams
     */
    'shippingAddress'?: Address;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof OrderCreationParams
     */
    'metaData'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const OrderStatus: {
    readonly Pending: "PENDING";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly Fulfilled: "FULFILLED";
    readonly Returned: "RETURNED";
};
export declare type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];
/**
 * Make all properties in T optional
 * @export
 * @interface PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
 */
export interface PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey {
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'groupId'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'orderId'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'checkoutId'?: string;
    /**
     *
     * @type {SplitType}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'splitType'?: SplitType;
    /**
     *
     * @type {number}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'splitAllocation'?: number;
    /**
     *
     * @type {{ [key: string]: Money; }}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'customAllocation'?: {
        [key: string]: Money;
    };
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'itemAllocation'?: {
        [key: string]: Array<string>;
    };
    /**
     *
     * @type {Money}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'amountMoney'?: Money;
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'expirationDate'?: string;
    /**
     *
     * @type {Address}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'shippingAddress'?: Address;
    /**
     * If this is set to true, the group payment will be completed as soon as the total amount is made up  Defaults to true.
     * @type {boolean}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'autocomplete'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'statementDescriptionIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'note'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialOmitGroupPaymentCreationParamsCustomerOrIdempotencyKey
     */
    'referenceId'?: string;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialOrderCreationParams
 */
export interface PartialOrderCreationParams {
    /**
     *
     * @type {Array<LineItemCreationParam>}
     * @memberof PartialOrderCreationParams
     */
    'lineItemParams'?: Array<LineItemCreationParam>;
    /**
     *
     * @type {Array<string>}
     * @memberof PartialOrderCreationParams
     */
    'discountCodes'?: Array<string>;
    /**
     * Customer who is paying for the order
     * @type {string | CustomerCreationParams}
     * @memberof PartialOrderCreationParams
     */
    'customer'?: string | CustomerCreationParams;
    /**
     *
     * @type {Address}
     * @memberof PartialOrderCreationParams
     */
    'shippingAddress'?: Address;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PartialOrderCreationParams
     */
    'metaData'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface PasswordResetParams
 */
export interface PasswordResetParams {
    /**
     * Email address. See [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
     * @type {string}
     * @memberof PasswordResetParams
     */
    'email': string;
    /**
     * Password
     * @type {string}
     * @memberof PasswordResetParams
     */
    'password': string;
    /**
     * Password
     * @type {string}
     * @memberof PasswordResetParams
     */
    'confirmPassword': string;
}
/**
 *
 * @export
 * @interface PayIntoGroupPaymentRequest
 */
export interface PayIntoGroupPaymentRequest {
    /**
     *
     * @type {string}
     * @memberof PayIntoGroupPaymentRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {string}
     * @memberof PayIntoGroupPaymentRequest
     */
    'paymentToken': string;
    /**
     *
     * @type {string}
     * @memberof PayIntoGroupPaymentRequest
     */
    'customerId': string;
    /**
     *
     * @type {Money}
     * @memberof PayIntoGroupPaymentRequest
     */
    'tipMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof PayIntoGroupPaymentRequest
     */
    'appFee'?: Money;
    /**
     *
     * @type {Address}
     * @memberof PayIntoGroupPaymentRequest
     */
    'billingAddress'?: Address;
    /**
     *
     * @type {string}
     * @memberof PayIntoGroupPaymentRequest
     */
    'verificationToken'?: string;
    /**
     *
     * @type {string}
     * @memberof PayIntoGroupPaymentRequest
     */
    'statementDescriptionIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof PayIntoGroupPaymentRequest
     */
    'note'?: string;
    /**
     *
     * @type {string}
     * @memberof PayIntoGroupPaymentRequest
     */
    'referenceId'?: string;
}
/**
 *
 * @export
 * @interface PaymentError
 */
export interface PaymentError {
    /**
     *
     * @type {string}
     * @memberof PaymentError
     */
    'category': string;
    /**
     *
     * @type {string}
     * @memberof PaymentError
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PaymentError
     */
    'detail'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentError
     */
    'field'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const PaymentMethod: {
    readonly Card: "CARD";
    readonly BankAccount: "BANK_ACCOUNT";
    readonly Cash: "CASH";
    readonly External: "EXTERNAL";
};
export declare type PaymentMethod = typeof PaymentMethod[keyof typeof PaymentMethod];
/**
 *
 * @export
 * @interface PaymentRecord
 */
export interface PaymentRecord {
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'customerId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'orderId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'groupPaymentId'?: string;
    /**
     *
     * @type {Money}
     * @memberof PaymentRecord
     */
    'totalMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof PaymentRecord
     */
    'amountMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof PaymentRecord
     */
    'tipMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof PaymentRecord
     */
    'approvedMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof PaymentRecord
     */
    'refundedMoney'?: Money;
    /**
     *
     * @type {Money}
     * @memberof PaymentRecord
     */
    'appFee'?: Money;
    /**
     *
     * @type {Array<ProcessingFee>}
     * @memberof PaymentRecord
     */
    'processingFees'?: Array<ProcessingFee>;
    /**
     *
     * @type {Array<string>}
     * @memberof PaymentRecord
     */
    'refundIds'?: Array<string>;
    /**
     *
     * @type {PaymentStatus}
     * @memberof PaymentRecord
     */
    'status': PaymentStatus;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'expirationDate'?: string;
    /**
     *
     * @type {PaymentMethod}
     * @memberof PaymentRecord
     */
    'paymentMethod': PaymentMethod;
    /**
     *
     * @type {CardPaymentDetails}
     * @memberof PaymentRecord
     */
    'cardDetails'?: CardPaymentDetails;
    /**
     *
     * @type {BankAccountPaymentDetails}
     * @memberof PaymentRecord
     */
    'bankAccountDetails'?: BankAccountPaymentDetails;
    /**
     *
     * @type {CashPaymentDetails}
     * @memberof PaymentRecord
     */
    'cashDetails'?: CashPaymentDetails;
    /**
     *
     * @type {ExternalPaymentDetails}
     * @memberof PaymentRecord
     */
    'externalDetails'?: ExternalPaymentDetails;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'locationId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'referenceId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'employeeId'?: string;
    /**
     *
     * @type {RiskEvaluation}
     * @memberof PaymentRecord
     */
    'riskEvaluation'?: RiskEvaluation;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'buyerEmailAddress'?: string;
    /**
     *
     * @type {Address}
     * @memberof PaymentRecord
     */
    'billingAddress'?: Address;
    /**
     *
     * @type {Address}
     * @memberof PaymentRecord
     */
    'shippingAddress'?: Address;
    /**
     *
     * @type {Array<string>}
     * @memberof PaymentRecord
     */
    'capabilities'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'receiptNumber'?: string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof PaymentRecord
     */
    'receiptUrl'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'versionToken'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'note'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'statementDescriptionIdentifier'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PaymentRecord
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof PaymentRecord
     */
    'version': number;
}
/**
 *
 * @export
 * @interface PaymentRefundRequest
 */
export interface PaymentRefundRequest {
    /**
     *
     * @type {string}
     * @memberof PaymentRefundRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {Money}
     * @memberof PaymentRefundRequest
     */
    'amountMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof PaymentRefundRequest
     */
    'appFee'?: Money;
    /**
     *
     * @type {string}
     * @memberof PaymentRefundRequest
     */
    'reason'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const PaymentStatus: {
    readonly Approved: "APPROVED";
    readonly Pending: "PENDING";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
export declare type PaymentStatus = typeof PaymentStatus[keyof typeof PaymentStatus];
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
 */
export interface PickClientExcludeKeyofClientVerifiedSigOrTrustedSig {
    /**
     *
     * @type {string}
     * @memberof PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
     */
    'name': string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
     */
    'logoUrl'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
     */
    'redirectUris'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
     */
    'secretKey': string;
    /**
     *
     * @type {Array<string>}
     * @memberof PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
     */
    'scopes': Array<string>;
    /**
     *
     * @type {string}
     * @memberof PickClientExcludeKeyofClientVerifiedSigOrTrustedSig
     */
    'ownerId'?: string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
 */
export interface PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails {
    /**
     *
     * @type {string}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'name': string;
    /**
     *
     * @type {Money}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'amountMoney': Money;
    /**
     * Key-value pairs that help to differentiate variants
     * @type {{ [key: string]: string; }}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'attributes'?: {
        [key: string]: string;
    };
    /**
     * 300 word description of the item.
     * @type {string}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'description'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'metaData'?: {
        [key: string]: string;
    };
    /**
     * Max 10 images per item. Default image is the first in array.
     * @type {Array<string>}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'imageUrls'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'sku'?: string;
    /**
     *
     * @type {ItemOrderDetails}
     * @memberof PickItemOrAmountMoneyOrAttributesOrDescriptionOrIdOrMetaDataOrImageUrlsOrNameOrSkuOrOrderDetails
     */
    'orderDetails'?: ItemOrderDetails;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency
 */
export interface PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency {
    /**
     *
     * @type {string}
     * @memberof PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency
     */
    'name': string;
    /**
     * URL linking to a resource or website.
     * @type {string}
     * @memberof PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency
     */
    'logoUrl'?: string;
    /**
     *
     * @type {MerchantContactDetails}
     * @memberof PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency
     */
    'contactDetails': MerchantContactDetails;
    /**
     *
     * @type {Currency}
     * @memberof PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency
     */
    'defaultCurrency': Currency;
}
/**
 *
 * @export
 * @interface ProcessingFee
 */
export interface ProcessingFee {
    /**
     *
     * @type {string}
     * @memberof ProcessingFee
     */
    'effectiveAt'?: string;
    /**
     *
     * @type {string}
     * @memberof ProcessingFee
     */
    'type'?: string;
    /**
     *
     * @type {Money}
     * @memberof ProcessingFee
     */
    'amountMoney': Money;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const PromptType: {
    readonly Consent: "consent";
    readonly SelectAccount: "select_account";
    readonly Login: "login";
    readonly None: "none";
};
export declare type PromptType = typeof PromptType[keyof typeof PromptType];
/**
 *
 * @export
 * @interface RefundRecord
 */
export interface RefundRecord {
    /**
     *
     * @type {string}
     * @memberof RefundRecord
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof RefundRecord
     */
    'paymentId': string;
    /**
     *
     * @type {Money}
     * @memberof RefundRecord
     */
    'amountMoney': Money;
    /**
     *
     * @type {Money}
     * @memberof RefundRecord
     */
    'appFee'?: Money;
    /**
     *
     * @type {RefundStatus}
     * @memberof RefundRecord
     */
    'status': RefundStatus;
    /**
     *
     * @type {Array<ProcessingFee>}
     * @memberof RefundRecord
     */
    'processingFees'?: Array<ProcessingFee>;
    /**
     *
     * @type {string}
     * @memberof RefundRecord
     */
    'locationId'?: string;
    /**
     *
     * @type {string}
     * @memberof RefundRecord
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof RefundRecord
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const RefundStatus: {
    readonly Pending: "PENDING";
    readonly Completed: "COMPLETED";
    readonly Rejected: "REJECTED";
    readonly Failed: "FAILED";
};
export declare type RefundStatus = typeof RefundStatus[keyof typeof RefundStatus];
/**
 *
 * @export
 * @interface RequestResetParams
 */
export interface RequestResetParams {
    /**
     * Email address. See [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322)
     * @type {string}
     * @memberof RequestResetParams
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof RequestResetParams
     */
    'ip'?: string;
    /**
     *
     * @type {string}
     * @memberof RequestResetParams
     */
    'browser'?: string;
    /**
     *
     * @type {string}
     * @memberof RequestResetParams
     */
    'device'?: string;
}
/**
 *
 * @export
 * @interface RiskEvaluation
 */
export interface RiskEvaluation {
    /**
     *
     * @type {string}
     * @memberof RiskEvaluation
     */
    'createdAt'?: string;
    /**
     *
     * @type {RiskLevel}
     * @memberof RiskEvaluation
     */
    'riskLevel': RiskLevel;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const RiskLevel: {
    readonly Low: "LOW";
    readonly Moderate: "MODERATE";
    readonly High: "HIGH";
};
export declare type RiskLevel = typeof RiskLevel[keyof typeof RiskLevel];
/**
 *
 * @export
 * @enum {string}
 */
export declare const Service: {
    readonly Square: "square";
    readonly Stripe: "stripe";
};
export declare type Service = typeof Service[keyof typeof Service];
/**
 *
 * @export
 * @enum {string}
 */
export declare const SplitType: {
    readonly Equal: "EQUAL";
    readonly ByItem: "BY_ITEM";
    readonly Custom: "CUSTOM";
};
export declare type SplitType = typeof SplitType[keyof typeof SplitType];
/**
 *
 * @export
 * @interface Sublocality
 */
export interface Sublocality {
    /**
     *
     * @type {string}
     * @memberof Sublocality
     */
    'sublocality1': string;
    /**
     *
     * @type {string}
     * @memberof Sublocality
     */
    'sublocality2'?: string;
    /**
     *
     * @type {string}
     * @memberof Sublocality
     */
    'sublocality3'?: string;
}
/**
 *
 * @export
 * @interface Tax
 */
export interface Tax {
    /**
     *
     * @type {string}
     * @memberof Tax
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Tax
     */
    'code': string;
    /**
     *
     * @type {Money}
     * @memberof Tax
     */
    'amountMoney': Money;
}
/**
 *
 * @export
 * @interface TemplateEmailCreationParams
 */
export interface TemplateEmailCreationParams {
    /**
     *
     * @type {Array<string>}
     * @memberof TemplateEmailCreationParams
     */
    'to': Array<string>;
    /**
     *
     * @type {string}
     * @memberof TemplateEmailCreationParams
     */
    'subject': string;
    /**
     *
     * @type {Array<string>}
     * @memberof TemplateEmailCreationParams
     */
    'cc'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof TemplateEmailCreationParams
     */
    'bcc'?: Array<string>;
    /**
     *
     * @type {Array<Attachment>}
     * @memberof TemplateEmailCreationParams
     */
    'attachment'?: Array<Attachment>;
    /**
     *
     * @type {string}
     * @memberof TemplateEmailCreationParams
     */
    'html'?: string;
    /**
     *
     * @type {string}
     * @memberof TemplateEmailCreationParams
     */
    'text'?: string;
    /**
     *
     * @type {string}
     * @memberof TemplateEmailCreationParams
     */
    'templateName': string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof TemplateEmailCreationParams
     */
    'variables'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface TextEmailCreationParams
 */
export interface TextEmailCreationParams {
    /**
     *
     * @type {Array<string>}
     * @memberof TextEmailCreationParams
     */
    'to': Array<string>;
    /**
     *
     * @type {string}
     * @memberof TextEmailCreationParams
     */
    'subject': string;
    /**
     *
     * @type {Array<string>}
     * @memberof TextEmailCreationParams
     */
    'cc'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof TextEmailCreationParams
     */
    'bcc'?: Array<string>;
    /**
     *
     * @type {Array<Attachment>}
     * @memberof TextEmailCreationParams
     */
    'attachment'?: Array<Attachment>;
    /**
     *
     * @type {string}
     * @memberof TextEmailCreationParams
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof TextEmailCreationParams
     */
    'html'?: string;
    /**
     *
     * @type {string}
     * @memberof TextEmailCreationParams
     */
    'templateName'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof TextEmailCreationParams
     */
    'variables'?: {
        [key: string]: string;
    };
}
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export declare const AccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Supply an account JWT access token and delete the associated profile from it
     * @summary Delete an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a Hands In account by supplying the necessary details
     * @summary Create an account
     * @param {AccountCreationParams} accountCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: (accountCreationParams: AccountCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply an account JWT access token and receive all profile data stored by Hands In
     * @summary Retrieve account profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply an account JWT access token and retrieve the all the applications that are connected to this account
     * @summary List connected account applications
     * @param {string} [appName]
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplications: (appName?: string, pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
export declare const AccountsApiFp: (configuration?: Configuration) => {
    /**
     * Supply an account JWT access token and delete the associated profile from it
     * @summary Delete an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a Hands In account by supplying the necessary details
     * @summary Create an account
     * @param {AccountCreationParams} accountCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(accountCreationParams: AccountCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>>;
    /**
     * Supply an account JWT access token and receive all profile data stored by Hands In
     * @summary Retrieve account profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDTO>>;
    /**
     * Supply an account JWT access token and retrieve the all the applications that are connected to this account
     * @summary List connected account applications
     * @param {string} [appName]
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplications(appName?: string, pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountApp>>>;
};
/**
 * AccountsApi - factory interface
 * @export
 */
export declare const AccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Supply an account JWT access token and delete the associated profile from it
     * @summary Delete an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(options?: any): AxiosPromise<void>;
    /**
     * Create a Hands In account by supplying the necessary details
     * @summary Create an account
     * @param {AccountCreationParams} accountCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(accountCreationParams: AccountCreationParams, options?: any): AxiosPromise<AccountDTO>;
    /**
     * Supply an account JWT access token and receive all profile data stored by Hands In
     * @summary Retrieve account profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: any): AxiosPromise<AccountDTO>;
    /**
     * Supply an account JWT access token and retrieve the all the applications that are connected to this account
     * @summary List connected account applications
     * @param {string} [appName]
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApplications(appName?: string, pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<AccountApp>>;
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export declare class AccountsApi extends BaseAPI {
    /**
     * Supply an account JWT access token and delete the associated profile from it
     * @summary Delete an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    _delete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a Hands In account by supplying the necessary details
     * @summary Create an account
     * @param {AccountCreationParams} accountCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    create(accountCreationParams: AccountCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountDTO, any>>;
    /**
     * Supply an account JWT access token and receive all profile data stored by Hands In
     * @summary Retrieve account profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getProfile(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountDTO, any>>;
    /**
     * Supply an account JWT access token and retrieve the all the applications that are connected to this account
     * @summary List connected account applications
     * @param {string} [appName]
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    listApplications(appName?: string, pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountApp[], any>>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
     * @summary Login to your Hands In account
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginParams: LoginParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requesting a password reset will email a link to the account enabling them to reset their password
     * @summary Create a reset password request
     * @param {RequestResetParams} requestResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestPasswordReset: (requestResetParams: RequestResetParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Reset account password
     * @summary Reset password
     * @param {string} resetToken
     * @param {PasswordResetParams} passwordResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword: (resetToken: string, passwordResetParams: PasswordResetParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
     * @summary Login to your Hands In account
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginParams: LoginParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthTokenResponse>>;
    /**
     * Requesting a password reset will email a link to the account enabling them to reset their password
     * @summary Create a reset password request
     * @param {RequestResetParams} requestResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestPasswordReset(requestResetParams: RequestResetParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthTokenResponse>>;
    /**
     * Reset account password
     * @summary Reset password
     * @param {string} resetToken
     * @param {PasswordResetParams} passwordResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(resetToken: string, passwordResetParams: PasswordResetParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
     * @summary Login to your Hands In account
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginParams: LoginParams, options?: any): AxiosPromise<OAuthTokenResponse>;
    /**
     * Requesting a password reset will email a link to the account enabling them to reset their password
     * @summary Create a reset password request
     * @param {RequestResetParams} requestResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestPasswordReset(requestResetParams: RequestResetParams, options?: any): AxiosPromise<OAuthTokenResponse>;
    /**
     * Reset account password
     * @summary Reset password
     * @param {string} resetToken
     * @param {PasswordResetParams} passwordResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(resetToken: string, passwordResetParams: PasswordResetParams, options?: any): AxiosPromise<void>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     * Supply an email and password to recieve a JWT token which gives acts as an identification token for all resources hosted by Hands In
     * @summary Login to your Hands In account
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    login(loginParams: LoginParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuthTokenResponse, any>>;
    /**
     * Requesting a password reset will email a link to the account enabling them to reset their password
     * @summary Create a reset password request
     * @param {RequestResetParams} requestResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    requestPasswordReset(requestResetParams: RequestResetParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuthTokenResponse, any>>;
    /**
     * Reset account password
     * @summary Reset password
     * @param {string} resetToken
     * @param {PasswordResetParams} passwordResetParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    resetPassword(resetToken: string, passwordResetParams: PasswordResetParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * CheckoutsApi - axios parameter creator
 * @export
 */
export declare const CheckoutsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckout: (checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply the unique dispute ID and receive corresponding checkout details.
     * @summary Retrieve a checkout session
     * @param {string} checkoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckout: (checkoutId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of checkout sessions by supplying the correct parameters.
     * @summary List all checkout sessions
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCheckouts: (pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a checkout session by supplying the correct parameters.
     * @summary Update a checkout session
     * @param {string} checkoutId
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCheckout: (checkoutId: string, checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CheckoutsApi - functional programming interface
 * @export
 */
export declare const CheckoutsApiFp: (configuration?: Configuration) => {
    /**
     * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckout(checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSession>>;
    /**
     * Supply the unique dispute ID and receive corresponding checkout details.
     * @summary Retrieve a checkout session
     * @param {string} checkoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckout(checkoutId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSession>>;
    /**
     * Retrieve a list of checkout sessions by supplying the correct parameters.
     * @summary List all checkout sessions
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCheckouts(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CheckoutSession>>>;
    /**
     * Update a checkout session by supplying the correct parameters.
     * @summary Update a checkout session
     * @param {string} checkoutId
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCheckout(checkoutId: string, checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSession>>;
};
/**
 * CheckoutsApi - factory interface
 * @export
 */
export declare const CheckoutsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckout(checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: any): AxiosPromise<CheckoutSession>;
    /**
     * Supply the unique dispute ID and receive corresponding checkout details.
     * @summary Retrieve a checkout session
     * @param {string} checkoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckout(checkoutId: string, options?: any): AxiosPromise<CheckoutSession>;
    /**
     * Retrieve a list of checkout sessions by supplying the correct parameters.
     * @summary List all checkout sessions
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCheckouts(pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<CheckoutSession>>;
    /**
     * Update a checkout session by supplying the correct parameters.
     * @summary Update a checkout session
     * @param {string} checkoutId
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCheckout(checkoutId: string, checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: any): AxiosPromise<CheckoutSession>;
};
/**
 * CheckoutsApi - object-oriented interface
 * @export
 * @class CheckoutsApi
 * @extends {BaseAPI}
 */
export declare class CheckoutsApi extends BaseAPI {
    /**
     * Create a checkout session by supplying the correct parameters. When a customer pays on the checkout session an order will be created.
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    createCheckout(checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckoutSession, any>>;
    /**
     * Supply the unique dispute ID and receive corresponding checkout details.
     * @summary Retrieve a checkout session
     * @param {string} checkoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    getCheckout(checkoutId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckoutSession, any>>;
    /**
     * Retrieve a list of checkout sessions by supplying the correct parameters.
     * @summary List all checkout sessions
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    listCheckouts(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckoutSession[], any>>;
    /**
     * Update a checkout session by supplying the correct parameters.
     * @summary Update a checkout session
     * @param {string} checkoutId
     * @param {CheckoutSessionCreationParams} checkoutSessionCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutsApi
     */
    updateCheckout(checkoutId: string, checkoutSessionCreationParams: CheckoutSessionCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckoutSession, any>>;
}
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export declare const CustomersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a Customer
     * @param {CustomerCreationParams} customerCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: (customerCreationParams: CustomerCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a Customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer: (customerId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply the unique customer ID and recieve the corresponding customer.
     * @summary Retrieve a customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer: (customerId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
export declare const CustomersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a Customer
     * @param {CustomerCreationParams} customerCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(customerCreationParams: CustomerCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>>;
    /**
     *
     * @summary Delete a Customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>>;
    /**
     * Supply the unique customer ID and recieve the corresponding customer.
     * @summary Retrieve a customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(customerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>>;
};
/**
 * CustomersApi - factory interface
 * @export
 */
export declare const CustomersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a Customer
     * @param {CustomerCreationParams} customerCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(customerCreationParams: CustomerCreationParams, options?: any): AxiosPromise<Customer>;
    /**
     *
     * @summary Delete a Customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(customerId: string, options?: any): AxiosPromise<Customer>;
    /**
     * Supply the unique customer ID and recieve the corresponding customer.
     * @summary Retrieve a customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(customerId: string, options?: any): AxiosPromise<Customer>;
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export declare class CustomersApi extends BaseAPI {
    /**
     *
     * @summary Create a Customer
     * @param {CustomerCreationParams} customerCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    createCustomer(customerCreationParams: CustomerCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customer, any>>;
    /**
     *
     * @summary Delete a Customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    deleteCustomer(customerId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customer, any>>;
    /**
     * Supply the unique customer ID and recieve the corresponding customer.
     * @summary Retrieve a customer
     * @param {string} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    getCustomer(customerId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customer, any>>;
}
/**
 * EmailsApi - axios parameter creator
 * @export
 */
export declare const EmailsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve email details given the email ID
     * @summary Retrieve an email
     * @param {string} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmail: (emailId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of emails given the required parameters
     * @summary List emails
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmails: (pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Send an email from handsin by providing the parameters
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmail: (emailCreationParams: EmailCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EmailsApi - functional programming interface
 * @export
 */
export declare const EmailsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve email details given the email ID
     * @summary Retrieve an email
     * @param {string} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmail(emailId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Email>>;
    /**
     * Retrieve a list of emails given the required parameters
     * @summary List emails
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmails(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Email>>>;
    /**
     * Send an email from handsin by providing the parameters
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmail(emailCreationParams: EmailCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Email>>;
};
/**
 * EmailsApi - factory interface
 * @export
 */
export declare const EmailsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve email details given the email ID
     * @summary Retrieve an email
     * @param {string} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmail(emailId: string, options?: any): AxiosPromise<Email>;
    /**
     * Retrieve a list of emails given the required parameters
     * @summary List emails
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmails(pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<Email>>;
    /**
     * Send an email from handsin by providing the parameters
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmail(emailCreationParams: EmailCreationParams, options?: any): AxiosPromise<Email>;
};
/**
 * EmailsApi - object-oriented interface
 * @export
 * @class EmailsApi
 * @extends {BaseAPI}
 */
export declare class EmailsApi extends BaseAPI {
    /**
     * Retrieve email details given the email ID
     * @summary Retrieve an email
     * @param {string} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    getEmail(emailId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Email, any>>;
    /**
     * Retrieve a list of emails given the required parameters
     * @summary List emails
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    listEmails(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Email[], any>>;
    /**
     * Send an email from handsin by providing the parameters
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    sendEmail(emailCreationParams: EmailCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Email, any>>;
}
/**
 * GroupPaymentsApi - axios parameter creator
 * @export
 */
export declare const GroupPaymentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancel a group payment
     * @param {string} groupPaymentId
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelGroupPayment: (groupPaymentId: string, inlineObject: InlineObject, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a group payment
     * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupPayment: (createGroupPaymentRequest: CreateGroupPaymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply the unique group payment ID and recieve the corresponding group payment.
     * @summary Retrieve a group payment
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupPayment: (groupPaymentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all group payment refunds
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupPaymentRefunds: (groupPaymentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Join a group payment
     * @param {string} groupPaymentId
     * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinGroupPayment: (groupPaymentId: string, joinGroupPaymentRequest: JoinGroupPaymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Kick member from a group payment
     * @param {string} groupPaymentId
     * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kickGroupPayment: (groupPaymentId: string, kickGroupPaymentRequest: KickGroupPaymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Leave a group payment
     * @param {string} groupPaymentId
     * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveGroupPayment: (groupPaymentId: string, leaveGroupPaymentRequest: LeaveGroupPaymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all group payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroupPayments: (pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Collect a payment from an individual user that is intended to be part of a group payment.
     * @summary Pay into a group payment
     * @param {string} groupPaymentId
     * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payInto: (groupPaymentId: string, payIntoGroupPaymentRequest: PayIntoGroupPaymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a full refund back to each customer that paid into the supplied group payment.
     * @summary Refund a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundGroupPayment: (groupPaymentId: string, groupPaymentRefundRequest: GroupPaymentRefundRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupPayment: (groupPaymentId: string, groupPaymentUpdateParams: GroupPaymentUpdateParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupPaymentsApi - functional programming interface
 * @export
 */
export declare const GroupPaymentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancel a group payment
     * @param {string} groupPaymentId
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelGroupPayment(groupPaymentId: string, inlineObject: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
    /**
     *
     * @summary Create a group payment
     * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupPayment(createGroupPaymentRequest: CreateGroupPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
    /**
     * Supply the unique group payment ID and recieve the corresponding group payment.
     * @summary Retrieve a group payment
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupPayment(groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
    /**
     *
     * @summary List all group payment refunds
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupPaymentRefunds(groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefundRecord>>>;
    /**
     *
     * @summary Join a group payment
     * @param {string} groupPaymentId
     * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinGroupPayment(groupPaymentId: string, joinGroupPaymentRequest: JoinGroupPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
    /**
     *
     * @summary Kick member from a group payment
     * @param {string} groupPaymentId
     * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kickGroupPayment(groupPaymentId: string, kickGroupPaymentRequest: KickGroupPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
    /**
     *
     * @summary Leave a group payment
     * @param {string} groupPaymentId
     * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveGroupPayment(groupPaymentId: string, leaveGroupPaymentRequest: LeaveGroupPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
    /**
     *
     * @summary List all group payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroupPayments(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupPaymentRecord>>>;
    /**
     * Collect a payment from an individual user that is intended to be part of a group payment.
     * @summary Pay into a group payment
     * @param {string} groupPaymentId
     * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payInto(groupPaymentId: string, payIntoGroupPaymentRequest: PayIntoGroupPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
    /**
     * Create a full refund back to each customer that paid into the supplied group payment.
     * @summary Refund a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundGroupPayment(groupPaymentId: string, groupPaymentRefundRequest: GroupPaymentRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefundRecord>>>;
    /**
     *
     * @summary Update a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupPayment(groupPaymentId: string, groupPaymentUpdateParams: GroupPaymentUpdateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPaymentRecord>>;
};
/**
 * GroupPaymentsApi - factory interface
 * @export
 */
export declare const GroupPaymentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Cancel a group payment
     * @param {string} groupPaymentId
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelGroupPayment(groupPaymentId: string, inlineObject: InlineObject, options?: any): AxiosPromise<GroupPaymentRecord>;
    /**
     *
     * @summary Create a group payment
     * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroupPayment(createGroupPaymentRequest: CreateGroupPaymentRequest, options?: any): AxiosPromise<GroupPaymentRecord>;
    /**
     * Supply the unique group payment ID and recieve the corresponding group payment.
     * @summary Retrieve a group payment
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupPayment(groupPaymentId: string, options?: any): AxiosPromise<GroupPaymentRecord>;
    /**
     *
     * @summary List all group payment refunds
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupPaymentRefunds(groupPaymentId: string, options?: any): AxiosPromise<Array<RefundRecord>>;
    /**
     *
     * @summary Join a group payment
     * @param {string} groupPaymentId
     * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinGroupPayment(groupPaymentId: string, joinGroupPaymentRequest: JoinGroupPaymentRequest, options?: any): AxiosPromise<GroupPaymentRecord>;
    /**
     *
     * @summary Kick member from a group payment
     * @param {string} groupPaymentId
     * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    kickGroupPayment(groupPaymentId: string, kickGroupPaymentRequest: KickGroupPaymentRequest, options?: any): AxiosPromise<GroupPaymentRecord>;
    /**
     *
     * @summary Leave a group payment
     * @param {string} groupPaymentId
     * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveGroupPayment(groupPaymentId: string, leaveGroupPaymentRequest: LeaveGroupPaymentRequest, options?: any): AxiosPromise<GroupPaymentRecord>;
    /**
     *
     * @summary List all group payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroupPayments(pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<GroupPaymentRecord>>;
    /**
     * Collect a payment from an individual user that is intended to be part of a group payment.
     * @summary Pay into a group payment
     * @param {string} groupPaymentId
     * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payInto(groupPaymentId: string, payIntoGroupPaymentRequest: PayIntoGroupPaymentRequest, options?: any): AxiosPromise<GroupPaymentRecord>;
    /**
     * Create a full refund back to each customer that paid into the supplied group payment.
     * @summary Refund a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundGroupPayment(groupPaymentId: string, groupPaymentRefundRequest: GroupPaymentRefundRequest, options?: any): AxiosPromise<Array<RefundRecord>>;
    /**
     *
     * @summary Update a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroupPayment(groupPaymentId: string, groupPaymentUpdateParams: GroupPaymentUpdateParams, options?: any): AxiosPromise<GroupPaymentRecord>;
};
/**
 * GroupPaymentsApi - object-oriented interface
 * @export
 * @class GroupPaymentsApi
 * @extends {BaseAPI}
 */
export declare class GroupPaymentsApi extends BaseAPI {
    /**
     *
     * @summary Cancel a group payment
     * @param {string} groupPaymentId
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    cancelGroupPayment(groupPaymentId: string, inlineObject: InlineObject, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
    /**
     *
     * @summary Create a group payment
     * @param {CreateGroupPaymentRequest} createGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    createGroupPayment(createGroupPaymentRequest: CreateGroupPaymentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
    /**
     * Supply the unique group payment ID and recieve the corresponding group payment.
     * @summary Retrieve a group payment
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    getGroupPayment(groupPaymentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
    /**
     *
     * @summary List all group payment refunds
     * @param {string} groupPaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    getGroupPaymentRefunds(groupPaymentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefundRecord[], any>>;
    /**
     *
     * @summary Join a group payment
     * @param {string} groupPaymentId
     * @param {JoinGroupPaymentRequest} joinGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    joinGroupPayment(groupPaymentId: string, joinGroupPaymentRequest: JoinGroupPaymentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
    /**
     *
     * @summary Kick member from a group payment
     * @param {string} groupPaymentId
     * @param {KickGroupPaymentRequest} kickGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    kickGroupPayment(groupPaymentId: string, kickGroupPaymentRequest: KickGroupPaymentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
    /**
     *
     * @summary Leave a group payment
     * @param {string} groupPaymentId
     * @param {LeaveGroupPaymentRequest} leaveGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    leaveGroupPayment(groupPaymentId: string, leaveGroupPaymentRequest: LeaveGroupPaymentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
    /**
     *
     * @summary List all group payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    listGroupPayments(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord[], any>>;
    /**
     * Collect a payment from an individual user that is intended to be part of a group payment.
     * @summary Pay into a group payment
     * @param {string} groupPaymentId
     * @param {PayIntoGroupPaymentRequest} payIntoGroupPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    payInto(groupPaymentId: string, payIntoGroupPaymentRequest: PayIntoGroupPaymentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
    /**
     * Create a full refund back to each customer that paid into the supplied group payment.
     * @summary Refund a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentRefundRequest} groupPaymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    refundGroupPayment(groupPaymentId: string, groupPaymentRefundRequest: GroupPaymentRefundRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefundRecord[], any>>;
    /**
     *
     * @summary Update a group payment
     * @param {string} groupPaymentId
     * @param {GroupPaymentUpdateParams} groupPaymentUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    updateGroupPayment(groupPaymentId: string, groupPaymentUpdateParams: GroupPaymentUpdateParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupPaymentRecord, any>>;
}
/**
 * ItemsApi - axios parameter creator
 * @export
 */
export declare const ItemsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create an item by supplying the correct parameters.
     * @summary Create an item
     * @param {ItemCreationParams} itemCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem: (itemCreationParams: ItemCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a item session by supplying the correct parameters.
     * @summary Delete an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem: (itemId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply the unique dispute ID and receive corresponding item details.
     * @summary Retrieve an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItem: (itemId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
     * @summary Retrieve multiple items
     * @param {ItemListParams} itemListParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems: (itemListParams: ItemListParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of items by supplying the correct parameters.
     * @summary List all items
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems: (pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a item by supplying the correct parameters.
     * @summary Update an item
     * @param {string} itemId
     * @param {ItemUpdateParams} itemUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem: (itemId: string, itemUpdateParams: ItemUpdateParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ItemsApi - functional programming interface
 * @export
 */
export declare const ItemsApiFp: (configuration?: Configuration) => {
    /**
     * Create an item by supplying the correct parameters.
     * @summary Create an item
     * @param {ItemCreationParams} itemCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(itemCreationParams: ItemCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>>;
    /**
     * Update a item session by supplying the correct parameters.
     * @summary Delete an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>>;
    /**
     * Supply the unique dispute ID and receive corresponding item details.
     * @summary Retrieve an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItem(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>>;
    /**
     * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
     * @summary Retrieve multiple items
     * @param {ItemListParams} itemListParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems(itemListParams: ItemListParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>>;
    /**
     * Retrieve a list of items by supplying the correct parameters.
     * @summary List all items
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>>;
    /**
     * Update a item by supplying the correct parameters.
     * @summary Update an item
     * @param {string} itemId
     * @param {ItemUpdateParams} itemUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(itemId: string, itemUpdateParams: ItemUpdateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>>;
};
/**
 * ItemsApi - factory interface
 * @export
 */
export declare const ItemsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create an item by supplying the correct parameters.
     * @summary Create an item
     * @param {ItemCreationParams} itemCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItem(itemCreationParams: ItemCreationParams, options?: any): AxiosPromise<Item>;
    /**
     * Update a item session by supplying the correct parameters.
     * @summary Delete an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(itemId: string, options?: any): AxiosPromise<Item>;
    /**
     * Supply the unique dispute ID and receive corresponding item details.
     * @summary Retrieve an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItem(itemId: string, options?: any): AxiosPromise<Item>;
    /**
     * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
     * @summary Retrieve multiple items
     * @param {ItemListParams} itemListParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems(itemListParams: ItemListParams, options?: any): AxiosPromise<Array<Item>>;
    /**
     * Retrieve a list of items by supplying the correct parameters.
     * @summary List all items
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listItems(pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<Item>>;
    /**
     * Update a item by supplying the correct parameters.
     * @summary Update an item
     * @param {string} itemId
     * @param {ItemUpdateParams} itemUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItem(itemId: string, itemUpdateParams: ItemUpdateParams, options?: any): AxiosPromise<Item>;
};
/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export declare class ItemsApi extends BaseAPI {
    /**
     * Create an item by supplying the correct parameters.
     * @summary Create an item
     * @param {ItemCreationParams} itemCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    createItem(itemCreationParams: ItemCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Item, any>>;
    /**
     * Update a item session by supplying the correct parameters.
     * @summary Delete an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    deleteItem(itemId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Item, any>>;
    /**
     * Supply the unique dispute ID and receive corresponding item details.
     * @summary Retrieve an item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    getItem(itemId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Item, any>>;
    /**
     * Retrieve all items by supplying a list of their Ids. Please note, that if any Id\'s are not valid, then they will just be ignored (no error is thrown)
     * @summary Retrieve multiple items
     * @param {ItemListParams} itemListParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    getItems(itemListParams: ItemListParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Item[], any>>;
    /**
     * Retrieve a list of items by supplying the correct parameters.
     * @summary List all items
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    listItems(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Item[], any>>;
    /**
     * Update a item by supplying the correct parameters.
     * @summary Update an item
     * @param {string} itemId
     * @param {ItemUpdateParams} itemUpdateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    updateItem(itemId: string, itemUpdateParams: ItemUpdateParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Item, any>>;
}
/**
 * MerchantApi - axios parameter creator
 * @export
 */
export declare const MerchantApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
     * @summary Create a merchant account
     * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMerchant: (body: PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a merchant account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMerchant: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply a merchant JWT token and retrieve merchant data
     * @summary Retrieve merchant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMerchant: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invite a merchant account team
     * @param {string} merchantId
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteMerchant: (merchantId: string, inlineObject1: InlineObject1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
     * @summary Join a merchant account team
     * @param {string} merchantId
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinMerchant: (merchantId: string, key: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
     * @summary Login to a merchant account
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginMerchant: (merchantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply a merchant JWT token and email parameters to send an email through the handsin email service
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailMerchant: (emailCreationParams: EmailCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MerchantApi - functional programming interface
 * @export
 */
export declare const MerchantApiFp: (configuration?: Configuration) => {
    /**
     * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
     * @summary Create a merchant account
     * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMerchant(body: PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDTO>>;
    /**
     *
     * @summary Delete a merchant account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMerchant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDTO>>;
    /**
     * Supply a merchant JWT token and retrieve merchant data
     * @summary Retrieve merchant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMerchant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDTO>>;
    /**
     *
     * @summary Invite a merchant account team
     * @param {string} merchantId
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteMerchant(merchantId: string, inlineObject1: InlineObject1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDTO>>;
    /**
     * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
     * @summary Join a merchant account team
     * @param {string} merchantId
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinMerchant(merchantId: string, key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDTO>>;
    /**
     * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
     * @summary Login to a merchant account
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthTokenResponse>>;
    /**
     * Supply a merchant JWT token and email parameters to send an email through the handsin email service
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailMerchant(emailCreationParams: EmailCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Email>>;
};
/**
 * MerchantApi - factory interface
 * @export
 */
export declare const MerchantApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
     * @summary Create a merchant account
     * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMerchant(body: PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency, options?: any): AxiosPromise<MerchantDTO>;
    /**
     *
     * @summary Delete a merchant account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMerchant(options?: any): AxiosPromise<MerchantDTO>;
    /**
     * Supply a merchant JWT token and retrieve merchant data
     * @summary Retrieve merchant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMerchant(options?: any): AxiosPromise<MerchantDTO>;
    /**
     *
     * @summary Invite a merchant account team
     * @param {string} merchantId
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteMerchant(merchantId: string, inlineObject1: InlineObject1, options?: any): AxiosPromise<MerchantDTO>;
    /**
     * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
     * @summary Join a merchant account team
     * @param {string} merchantId
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinMerchant(merchantId: string, key: string, options?: any): AxiosPromise<MerchantDTO>;
    /**
     * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
     * @summary Login to a merchant account
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginMerchant(merchantId: string, options?: any): AxiosPromise<OAuthTokenResponse>;
    /**
     * Supply a merchant JWT token and email parameters to send an email through the handsin email service
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailMerchant(emailCreationParams: EmailCreationParams, options?: any): AxiosPromise<Email>;
};
/**
 * MerchantApi - object-oriented interface
 * @export
 * @class MerchantApi
 * @extends {BaseAPI}
 */
export declare class MerchantApi extends BaseAPI {
    /**
     * Provide a ID token to create a merchant. Receive a JWT access token that gives all scope to account.
     * @summary Create a merchant account
     * @param {PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    createMerchant(body: PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantDTO, any>>;
    /**
     *
     * @summary Delete a merchant account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    deleteMerchant(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantDTO, any>>;
    /**
     * Supply a merchant JWT token and retrieve merchant data
     * @summary Retrieve merchant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    getMerchant(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantDTO, any>>;
    /**
     *
     * @summary Invite a merchant account team
     * @param {string} merchantId
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    inviteMerchant(merchantId: string, inlineObject1: InlineObject1, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantDTO, any>>;
    /**
     * Supply both the id token for the account, aswell as the access token, which would have been provided to you, through a link or email.
     * @summary Join a merchant account team
     * @param {string} merchantId
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    joinMerchant(merchantId: string, key: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantDTO, any>>;
    /**
     * Exchange an account access token to get a resource token Which gives access to all the merhant scopes you have permission for
     * @summary Login to a merchant account
     * @param {string} merchantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    loginMerchant(merchantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuthTokenResponse, any>>;
    /**
     * Supply a merchant JWT token and email parameters to send an email through the handsin email service
     * @summary Send an email
     * @param {EmailCreationParams} emailCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    sendEmailMerchant(emailCreationParams: EmailCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Email, any>>;
}
/**
 * MerchantConnectApi - axios parameter creator
 * @export
 */
export declare const MerchantConnectApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
     * @summary Connect to Merchant Payment Service
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authoriseMerchantPaymentConnect: (service: Service, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Connection to Merchant Payment Service Properties
     * @summary Get Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMerchantPaymentConnect: (service: Service, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
     * @summary Obtain Merchant Payment Connection
     * @param {Service} service
     * @param {string} [code]
     * @param {string} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainMerchantPaymentConnect: (service: Service, code?: string, state?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Re-Authorise Connection to Merchant Payment Service
     * @summary Renew Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renewMerchantPaymentConnect: (service: Service, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke Connection Tokens to Merchant Payment Service
     * @summary Revoke Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMerchantPaymentConnect: (service: Service, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MerchantConnectApi - functional programming interface
 * @export
 */
export declare const MerchantConnectApiFp: (configuration?: Configuration) => {
    /**
     * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
     * @summary Connect to Merchant Payment Service
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authoriseMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Get Connection to Merchant Payment Service Properties
     * @summary Get Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectRecord>>;
    /**
     * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
     * @summary Obtain Merchant Payment Connection
     * @param {Service} service
     * @param {string} [code]
     * @param {string} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainMerchantPaymentConnect(service: Service, code?: string, state?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Re-Authorise Connection to Merchant Payment Service
     * @summary Renew Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renewMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectRecord>>;
    /**
     * Revoke Connection Tokens to Merchant Payment Service
     * @summary Revoke Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * MerchantConnectApi - factory interface
 * @export
 */
export declare const MerchantConnectApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
     * @summary Connect to Merchant Payment Service
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authoriseMerchantPaymentConnect(service: Service, options?: any): AxiosPromise<string>;
    /**
     * Get Connection to Merchant Payment Service Properties
     * @summary Get Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMerchantPaymentConnect(service: Service, options?: any): AxiosPromise<ConnectRecord>;
    /**
     * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
     * @summary Obtain Merchant Payment Connection
     * @param {Service} service
     * @param {string} [code]
     * @param {string} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    obtainMerchantPaymentConnect(service: Service, code?: string, state?: string, options?: any): AxiosPromise<void>;
    /**
     * Re-Authorise Connection to Merchant Payment Service
     * @summary Renew Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renewMerchantPaymentConnect(service: Service, options?: any): AxiosPromise<ConnectRecord>;
    /**
     * Revoke Connection Tokens to Merchant Payment Service
     * @summary Revoke Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMerchantPaymentConnect(service: Service, options?: any): AxiosPromise<void>;
};
/**
 * MerchantConnectApi - object-oriented interface
 * @export
 * @class MerchantConnectApi
 * @extends {BaseAPI}
 */
export declare class MerchantConnectApi extends BaseAPI {
    /**
     * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
     * @summary Connect to Merchant Payment Service
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    authoriseMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Get Connection to Merchant Payment Service Properties
     * @summary Get Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    getMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectRecord, any>>;
    /**
     * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
     * @summary Obtain Merchant Payment Connection
     * @param {Service} service
     * @param {string} [code]
     * @param {string} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    obtainMerchantPaymentConnect(service: Service, code?: string, state?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Re-Authorise Connection to Merchant Payment Service
     * @summary Renew Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    renewMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectRecord, any>>;
    /**
     * Revoke Connection Tokens to Merchant Payment Service
     * @summary Revoke Merchant Payment Connection
     * @param {Service} service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    revokeMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create an order
     * @param {OrderCreationParams} orderCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder: (orderCreationParams: OrderCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrder: (orderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all Orders
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders: (pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update an order
     * @param {string} orderId
     * @param {PartialOrderCreationParams} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder: (orderId: string, body: PartialOrderCreationParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create an order
     * @param {OrderCreationParams} orderCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(orderCreationParams: OrderCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>>;
    /**
     *
     * @summary Retrieve an order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>>;
    /**
     *
     * @summary List all Orders
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Order>>>;
    /**
     *
     * @summary Update an order
     * @param {string} orderId
     * @param {PartialOrderCreationParams} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, body: PartialOrderCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create an order
     * @param {OrderCreationParams} orderCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(orderCreationParams: OrderCreationParams, options?: any): AxiosPromise<Order>;
    /**
     *
     * @summary Retrieve an order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrder(orderId: string, options?: any): AxiosPromise<Order>;
    /**
     *
     * @summary List all Orders
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders(pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<Order>>;
    /**
     *
     * @summary Update an order
     * @param {string} orderId
     * @param {PartialOrderCreationParams} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrder(orderId: string, body: PartialOrderCreationParams, options?: any): AxiosPromise<Order>;
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI {
    /**
     *
     * @summary Create an order
     * @param {OrderCreationParams} orderCreationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    createOrder(orderCreationParams: OrderCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Order, any>>;
    /**
     *
     * @summary Retrieve an order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrder(orderId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Order, any>>;
    /**
     *
     * @summary List all Orders
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    listOrders(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Order[], any>>;
    /**
     *
     * @summary Update an order
     * @param {string} orderId
     * @param {PartialOrderCreationParams} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    updateOrder(orderId: string, body: PartialOrderCreationParams, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Order, any>>;
}
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export declare const PaymentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancel a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPayment: (paymentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Collect a payment from an individual user
     * @summary Create a payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment: (createPaymentRequest: CreatePaymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Supply the unique payment ID and receive corresponding payment details.
     * @summary Retrieve a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment: (paymentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all payment refunds
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentRefunds: (paymentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments: (pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a full or partial refund back to a customer, from a supplied payment.
     * @summary Refund a payment
     * @param {string} paymentId
     * @param {PaymentRefundRequest} paymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment: (paymentId: string, paymentRefundRequest: PaymentRefundRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
export declare const PaymentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancel a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPayment(paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentRecord>>;
    /**
     * Collect a payment from an individual user
     * @summary Create a payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment(createPaymentRequest: CreatePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentRecord>>;
    /**
     * Supply the unique payment ID and receive corresponding payment details.
     * @summary Retrieve a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentRecord>>;
    /**
     *
     * @summary List all payment refunds
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentRefunds(paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefundRecord>>>;
    /**
     *
     * @summary List all payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentRecord>>>;
    /**
     * Create a full or partial refund back to a customer, from a supplied payment.
     * @summary Refund a payment
     * @param {string} paymentId
     * @param {PaymentRefundRequest} paymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment(paymentId: string, paymentRefundRequest: PaymentRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundRecord>>;
};
/**
 * PaymentsApi - factory interface
 * @export
 */
export declare const PaymentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Cancel a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPayment(paymentId: string, options?: any): AxiosPromise<PaymentRecord>;
    /**
     * Collect a payment from an individual user
     * @summary Create a payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment(createPaymentRequest: CreatePaymentRequest, options?: any): AxiosPromise<PaymentRecord>;
    /**
     * Supply the unique payment ID and receive corresponding payment details.
     * @summary Retrieve a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, options?: any): AxiosPromise<PaymentRecord>;
    /**
     *
     * @summary List all payment refunds
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentRefunds(paymentId: string, options?: any): AxiosPromise<Array<RefundRecord>>;
    /**
     *
     * @summary List all payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayments(pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<PaymentRecord>>;
    /**
     * Create a full or partial refund back to a customer, from a supplied payment.
     * @summary Refund a payment
     * @param {string} paymentId
     * @param {PaymentRefundRequest} paymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment(paymentId: string, paymentRefundRequest: PaymentRefundRequest, options?: any): AxiosPromise<RefundRecord>;
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export declare class PaymentsApi extends BaseAPI {
    /**
     *
     * @summary Cancel a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    cancelPayment(paymentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentRecord, any>>;
    /**
     * Collect a payment from an individual user
     * @summary Create a payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    createPayment(createPaymentRequest: CreatePaymentRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentRecord, any>>;
    /**
     * Supply the unique payment ID and receive corresponding payment details.
     * @summary Retrieve a payment
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPayment(paymentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentRecord, any>>;
    /**
     *
     * @summary List all payment refunds
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPaymentRefunds(paymentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefundRecord[], any>>;
    /**
     *
     * @summary List all payments
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    listPayments(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentRecord[], any>>;
    /**
     * Create a full or partial refund back to a customer, from a supplied payment.
     * @summary Refund a payment
     * @param {string} paymentId
     * @param {PaymentRefundRequest} paymentRefundRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    refundPayment(paymentId: string, paymentRefundRequest: PaymentRefundRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefundRecord, any>>;
}
/**
 * RefundsApi - axios parameter creator
 * @export
 */
export declare const RefundsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve a refund
     * @param {string} refundId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRefund: (refundId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all refunds
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds: (pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RefundsApi - functional programming interface
 * @export
 */
export declare const RefundsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve a refund
     * @param {string} refundId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRefund(refundId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundRecord>>;
    /**
     *
     * @summary List all refunds
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefundRecord>>>;
};
/**
 * RefundsApi - factory interface
 * @export
 */
export declare const RefundsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve a refund
     * @param {string} refundId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRefund(refundId: string, options?: any): AxiosPromise<RefundRecord>;
    /**
     *
     * @summary List all refunds
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRefunds(pageNum?: number, pageSize?: number, limit?: number, options?: any): AxiosPromise<Array<RefundRecord>>;
};
/**
 * RefundsApi - object-oriented interface
 * @export
 * @class RefundsApi
 * @extends {BaseAPI}
 */
export declare class RefundsApi extends BaseAPI {
    /**
     *
     * @summary Retrieve a refund
     * @param {string} refundId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    getRefund(refundId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefundRecord, any>>;
    /**
     *
     * @summary List all refunds
     * @param {number} [pageNum]
     * @param {number} [pageSize]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    listRefunds(pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefundRecord[], any>>;
}
