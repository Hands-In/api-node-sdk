/* tslint:disable */
/* eslint-disable */
/**
 * Merchant API
 * The Hands In API is the first and only service that enables users to transact within a group. Our API is heavily orientated around being a RESTful service  that has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, ant utilizes standard HTTP response codes
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateGroupPaymentRequest } from '../models';
import { GroupPaymentIdCancelBody } from '../models';
import { GroupPaymentRecord } from '../models';
import { GroupPaymentRefundRequest } from '../models';
import { GroupPaymentUpdateParams } from '../models';
import { JoinGroupPaymentRequest } from '../models';
import { KickGroupPaymentRequest } from '../models';
import { LeaveGroupPaymentRequest } from '../models';
import { ModelInteger } from '../models';
import { PayIntoGroupPaymentRequest } from '../models';
import { RefundRecord } from '../models';
/**
 * GroupPaymentsApi - axios parameter creator
 * @export
 */
export const GroupPaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel a group payment
         * @param {GroupPaymentIdCancelBody} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelGroupPayment: async (body: GroupPaymentIdCancelBody, groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cancelGroupPayment.');
            }
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling cancelGroupPayment.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}/cancel`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a group payment
         * @param {CreateGroupPaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPayment: async (body: CreateGroupPaymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createGroupPayment.');
            }
            const localVarPath = `/group-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Supply the unique group payment ID and recieve the corresponding group payment.
         * @summary Retrieve a group payment
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPayment: async (groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling getGroupPayment.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all group payment refunds
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPaymentRefunds: async (groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling getGroupPaymentRefunds.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}/refunds`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join a group payment
         * @param {JoinGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroupPayment: async (body: JoinGroupPaymentRequest, groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling joinGroupPayment.');
            }
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling joinGroupPayment.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}/join`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Kick member from a group payment
         * @param {KickGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kickGroupPayment: async (body: KickGroupPaymentRequest, groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling kickGroupPayment.');
            }
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling kickGroupPayment.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}/kick`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave a group payment
         * @param {LeaveGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroupPayment: async (body: LeaveGroupPaymentRequest, groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling leaveGroupPayment.');
            }
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling leaveGroupPayment.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}/leave`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all group payments
         * @param {ModelInteger} [pageNum] 
         * @param {ModelInteger} [pageSize] 
         * @param {ModelInteger} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupPayments: async (pageNum?: ModelInteger, pageSize?: ModelInteger, limit?: ModelInteger, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/group-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Collect a payment from an individual user that is intended to be part of a group payment.
         * @summary Pay into a group payment
         * @param {PayIntoGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payInto: async (body: PayIntoGroupPaymentRequest, groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling payInto.');
            }
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling payInto.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}/pay`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a full refund back to each customer that paid into the supplied group payment.
         * @summary Refund a group payment
         * @param {GroupPaymentRefundRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundGroupPayment: async (body: GroupPaymentRefundRequest, groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling refundGroupPayment.');
            }
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling refundGroupPayment.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}/refunds`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a group payment
         * @param {GroupPaymentUpdateParams} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupPayment: async (body: GroupPaymentUpdateParams, groupPaymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateGroupPayment.');
            }
            // verify required parameter 'groupPaymentId' is not null or undefined
            if (groupPaymentId === null || groupPaymentId === undefined) {
                throw new RequiredError('groupPaymentId','Required parameter groupPaymentId was null or undefined when calling updateGroupPayment.');
            }
            const localVarPath = `/group-payments/{groupPaymentId}`
                .replace(`{${"groupPaymentId"}}`, encodeURIComponent(String(groupPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-api-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            // authentication merchant-jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupPaymentsApi - functional programming interface
 * @export
 */
export const GroupPaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel a group payment
         * @param {GroupPaymentIdCancelBody} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelGroupPayment(body: GroupPaymentIdCancelBody, groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).cancelGroupPayment(body, groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a group payment
         * @param {CreateGroupPaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupPayment(body: CreateGroupPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).createGroupPayment(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Supply the unique group payment ID and recieve the corresponding group payment.
         * @summary Retrieve a group payment
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupPayment(groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).getGroupPayment(groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List all group payment refunds
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupPaymentRefunds(groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<RefundRecord>>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).getGroupPaymentRefunds(groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Join a group payment
         * @param {JoinGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinGroupPayment(body: JoinGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).joinGroupPayment(body, groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Kick member from a group payment
         * @param {KickGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kickGroupPayment(body: KickGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).kickGroupPayment(body, groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Leave a group payment
         * @param {LeaveGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveGroupPayment(body: LeaveGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).leaveGroupPayment(body, groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List all group payments
         * @param {ModelInteger} [pageNum] 
         * @param {ModelInteger} [pageSize] 
         * @param {ModelInteger} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroupPayments(pageNum?: ModelInteger, pageSize?: ModelInteger, limit?: ModelInteger, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GroupPaymentRecord>>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).listGroupPayments(pageNum, pageSize, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Collect a payment from an individual user that is intended to be part of a group payment.
         * @summary Pay into a group payment
         * @param {PayIntoGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payInto(body: PayIntoGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).payInto(body, groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a full refund back to each customer that paid into the supplied group payment.
         * @summary Refund a group payment
         * @param {GroupPaymentRefundRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundGroupPayment(body: GroupPaymentRefundRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<RefundRecord>>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).refundGroupPayment(body, groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a group payment
         * @param {GroupPaymentUpdateParams} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupPayment(body: GroupPaymentUpdateParams, groupPaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupPaymentRecord>>> {
            const localVarAxiosArgs = await GroupPaymentsApiAxiosParamCreator(configuration).updateGroupPayment(body, groupPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupPaymentsApi - factory interface
 * @export
 */
export const GroupPaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Cancel a group payment
         * @param {GroupPaymentIdCancelBody} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelGroupPayment(body: GroupPaymentIdCancelBody, groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).cancelGroupPayment(body, groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a group payment
         * @param {CreateGroupPaymentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupPayment(body: CreateGroupPaymentRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).createGroupPayment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Supply the unique group payment ID and recieve the corresponding group payment.
         * @summary Retrieve a group payment
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupPayment(groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).getGroupPayment(groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all group payment refunds
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupPaymentRefunds(groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<RefundRecord>>> {
            return GroupPaymentsApiFp(configuration).getGroupPaymentRefunds(groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join a group payment
         * @param {JoinGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinGroupPayment(body: JoinGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).joinGroupPayment(body, groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Kick member from a group payment
         * @param {KickGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kickGroupPayment(body: KickGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).kickGroupPayment(body, groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave a group payment
         * @param {LeaveGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveGroupPayment(body: LeaveGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).leaveGroupPayment(body, groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all group payments
         * @param {ModelInteger} [pageNum] 
         * @param {ModelInteger} [pageSize] 
         * @param {ModelInteger} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroupPayments(pageNum?: ModelInteger, pageSize?: ModelInteger, limit?: ModelInteger, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GroupPaymentRecord>>> {
            return GroupPaymentsApiFp(configuration).listGroupPayments(pageNum, pageSize, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Collect a payment from an individual user that is intended to be part of a group payment.
         * @summary Pay into a group payment
         * @param {PayIntoGroupPaymentRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payInto(body: PayIntoGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).payInto(body, groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a full refund back to each customer that paid into the supplied group payment.
         * @summary Refund a group payment
         * @param {GroupPaymentRefundRequest} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundGroupPayment(body: GroupPaymentRefundRequest, groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<RefundRecord>>> {
            return GroupPaymentsApiFp(configuration).refundGroupPayment(body, groupPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a group payment
         * @param {GroupPaymentUpdateParams} body 
         * @param {string} groupPaymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupPayment(body: GroupPaymentUpdateParams, groupPaymentId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupPaymentRecord>> {
            return GroupPaymentsApiFp(configuration).updateGroupPayment(body, groupPaymentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupPaymentsApi - object-oriented interface
 * @export
 * @class GroupPaymentsApi
 * @extends {BaseAPI}
 */
export class GroupPaymentsApi extends BaseAPI {
    /**
     * 
     * @summary Cancel a group payment
     * @param {GroupPaymentIdCancelBody} body 
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async cancelGroupPayment(body: GroupPaymentIdCancelBody, groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).cancelGroupPayment(body, groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a group payment
     * @param {CreateGroupPaymentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async createGroupPayment(body: CreateGroupPaymentRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).createGroupPayment(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Supply the unique group payment ID and recieve the corresponding group payment.
     * @summary Retrieve a group payment
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async getGroupPayment(groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).getGroupPayment(groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List all group payment refunds
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async getGroupPaymentRefunds(groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<RefundRecord>>> {
        return GroupPaymentsApiFp(this.configuration).getGroupPaymentRefunds(groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Join a group payment
     * @param {JoinGroupPaymentRequest} body 
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async joinGroupPayment(body: JoinGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).joinGroupPayment(body, groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Kick member from a group payment
     * @param {KickGroupPaymentRequest} body 
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async kickGroupPayment(body: KickGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).kickGroupPayment(body, groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Leave a group payment
     * @param {LeaveGroupPaymentRequest} body 
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async leaveGroupPayment(body: LeaveGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).leaveGroupPayment(body, groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List all group payments
     * @param {ModelInteger} [pageNum] 
     * @param {ModelInteger} [pageSize] 
     * @param {ModelInteger} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async listGroupPayments(pageNum?: ModelInteger, pageSize?: ModelInteger, limit?: ModelInteger, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GroupPaymentRecord>>> {
        return GroupPaymentsApiFp(this.configuration).listGroupPayments(pageNum, pageSize, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Collect a payment from an individual user that is intended to be part of a group payment.
     * @summary Pay into a group payment
     * @param {PayIntoGroupPaymentRequest} body 
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async payInto(body: PayIntoGroupPaymentRequest, groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).payInto(body, groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a full refund back to each customer that paid into the supplied group payment.
     * @summary Refund a group payment
     * @param {GroupPaymentRefundRequest} body 
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async refundGroupPayment(body: GroupPaymentRefundRequest, groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<RefundRecord>>> {
        return GroupPaymentsApiFp(this.configuration).refundGroupPayment(body, groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a group payment
     * @param {GroupPaymentUpdateParams} body 
     * @param {string} groupPaymentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPaymentsApi
     */
    public async updateGroupPayment(body: GroupPaymentUpdateParams, groupPaymentId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupPaymentRecord>> {
        return GroupPaymentsApiFp(this.configuration).updateGroupPayment(body, groupPaymentId, options).then((request) => request(this.axios, this.basePath));
    }
}
