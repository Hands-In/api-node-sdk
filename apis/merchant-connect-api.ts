/* tslint:disable */
/* eslint-disable */
/**
 * Merchant API
 * The Hands In API is the first and only service that enables users to transact within a group. Our API is heavily orientated around being a RESTful service  that has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, ant utilizes standard HTTP response codes
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ModelObject } from '../models';
import { Service } from '../models';
/**
 * MerchantConnectApi - axios parameter creator
 * @export
 */
export const MerchantConnectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
         * @summary Connect to Merchant Payment Service
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authoriseMerchantPaymentConnect: async (service: Service, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            if (service === null || service === undefined) {
                throw new RequiredError('service','Required parameter service was null or undefined when calling authoriseMerchantPaymentConnect.');
            }
            const localVarPath = `/merchant/{service}/connect`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Connection to Merchant Payment Service Properties
         * @summary Get Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantPaymentConnect: async (service: Service, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            if (service === null || service === undefined) {
                throw new RequiredError('service','Required parameter service was null or undefined when calling getMerchantPaymentConnect.');
            }
            const localVarPath = `/merchant/{service}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
         * @summary Obtain Merchant Payment Connection
         * @param {Service} service 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainMerchantPaymentConnect: async (service: Service, code?: string, state?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            if (service === null || service === undefined) {
                throw new RequiredError('service','Required parameter service was null or undefined when calling obtainMerchantPaymentConnect.');
            }
            const localVarPath = `/merchant/{service}/obtain`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Re-Authorise Connection to Merchant Payment Service
         * @summary Renew Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewMerchantPaymentConnect: async (service: Service, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            if (service === null || service === undefined) {
                throw new RequiredError('service','Required parameter service was null or undefined when calling renewMerchantPaymentConnect.');
            }
            const localVarPath = `/merchant/{service}/renew`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke Connection Tokens to Merchant Payment Service
         * @summary Revoke Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMerchantPaymentConnect: async (service: Service, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            if (service === null || service === undefined) {
                throw new RequiredError('service','Required parameter service was null or undefined when calling revokeMerchantPaymentConnect.');
            }
            const localVarPath = `/merchant/{service}/revoke`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication merchant-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantConnectApi - functional programming interface
 * @export
 */
export const MerchantConnectApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
         * @summary Connect to Merchant Payment Service
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoriseMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModelObject>>> {
            const localVarAxiosArgs = await MerchantConnectApiAxiosParamCreator(configuration).authoriseMerchantPaymentConnect(service, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Connection to Merchant Payment Service Properties
         * @summary Get Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModelObject>>> {
            const localVarAxiosArgs = await MerchantConnectApiAxiosParamCreator(configuration).getMerchantPaymentConnect(service, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
         * @summary Obtain Merchant Payment Connection
         * @param {Service} service 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obtainMerchantPaymentConnect(service: Service, code?: string, state?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModelObject>>> {
            const localVarAxiosArgs = await MerchantConnectApiAxiosParamCreator(configuration).obtainMerchantPaymentConnect(service, code, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Re-Authorise Connection to Merchant Payment Service
         * @summary Renew Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renewMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModelObject>>> {
            const localVarAxiosArgs = await MerchantConnectApiAxiosParamCreator(configuration).renewMerchantPaymentConnect(service, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke Connection Tokens to Merchant Payment Service
         * @summary Revoke Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModelObject>>> {
            const localVarAxiosArgs = await MerchantConnectApiAxiosParamCreator(configuration).revokeMerchantPaymentConnect(service, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MerchantConnectApi - factory interface
 * @export
 */
export const MerchantConnectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
         * @summary Connect to Merchant Payment Service
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authoriseMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<AxiosResponse<ModelObject>> {
            return MerchantConnectApiFp(configuration).authoriseMerchantPaymentConnect(service, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Connection to Merchant Payment Service Properties
         * @summary Get Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<AxiosResponse<ModelObject>> {
            return MerchantConnectApiFp(configuration).getMerchantPaymentConnect(service, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
         * @summary Obtain Merchant Payment Connection
         * @param {Service} service 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obtainMerchantPaymentConnect(service: Service, code?: string, state?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ModelObject>> {
            return MerchantConnectApiFp(configuration).obtainMerchantPaymentConnect(service, code, state, options).then((request) => request(axios, basePath));
        },
        /**
         * Re-Authorise Connection to Merchant Payment Service
         * @summary Renew Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renewMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<AxiosResponse<ModelObject>> {
            return MerchantConnectApiFp(configuration).renewMerchantPaymentConnect(service, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke Connection Tokens to Merchant Payment Service
         * @summary Revoke Merchant Payment Connection
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig): Promise<AxiosResponse<ModelObject>> {
            return MerchantConnectApiFp(configuration).revokeMerchantPaymentConnect(service, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MerchantConnectApi - object-oriented interface
 * @export
 * @class MerchantConnectApi
 * @extends {BaseAPI}
 */
export class MerchantConnectApi extends BaseAPI {
    /**
     * Redirect merchant to payment service (e.g. square) authorisation page and connect service via Merchant Payment Connector
     * @summary Connect to Merchant Payment Service
     * @param {Service} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    public async authoriseMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModelObject>> {
        return MerchantConnectApiFp(this.configuration).authoriseMerchantPaymentConnect(service, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Connection to Merchant Payment Service Properties
     * @summary Get Merchant Payment Connection
     * @param {Service} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    public async getMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModelObject>> {
        return MerchantConnectApiFp(this.configuration).getMerchantPaymentConnect(service, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Obtain access token for merchant payment service account This is automatically hit by redirect url after authorizing payment service
     * @summary Obtain Merchant Payment Connection
     * @param {Service} service 
     * @param {string} [code] 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    public async obtainMerchantPaymentConnect(service: Service, code?: string, state?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModelObject>> {
        return MerchantConnectApiFp(this.configuration).obtainMerchantPaymentConnect(service, code, state, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Re-Authorise Connection to Merchant Payment Service
     * @summary Renew Merchant Payment Connection
     * @param {Service} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    public async renewMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModelObject>> {
        return MerchantConnectApiFp(this.configuration).renewMerchantPaymentConnect(service, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke Connection Tokens to Merchant Payment Service
     * @summary Revoke Merchant Payment Connection
     * @param {Service} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantConnectApi
     */
    public async revokeMerchantPaymentConnect(service: Service, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModelObject>> {
        return MerchantConnectApiFp(this.configuration).revokeMerchantPaymentConnect(service, options).then((request) => request(this.axios, this.basePath));
    }
}
