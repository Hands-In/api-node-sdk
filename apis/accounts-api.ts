/* tslint:disable */
/* eslint-disable */
/**
 * Merchant API
 * The Hands In API is the first and only service that enables users to transact within a group. Our API is heavily orientated around being a RESTful service  that has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, ant utilizes standard HTTP response codes
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountApp } from '../models';
import { AccountCreationParams } from '../models';
import { AccountDTO } from '../models';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Supply an account JWT access token and delete the associated profile from it
         * @summary Delete an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication account-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Hands In account by supplying the necessary details
         * @summary Create an account
         * @param {AccountCreationParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body: AccountCreationParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Supply an account JWT access token and receive all profile data stored by Hands In
         * @summary Retrieve account profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication account-jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Supply an account JWT access token and retrieve the all the applications that are connected to this account
         * @summary List connected account applications
         * @param {string} [appName] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: async (appName?: string, pageNum?: number, pageSize?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication account-jwt required

            if (appName !== undefined) {
                localVarQueryParameter['appName'] = appName;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Supply an account JWT access token and delete the associated profile from it
         * @summary Delete an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration)._delete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Hands In account by supplying the necessary details
         * @summary Create an account
         * @param {AccountCreationParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body: AccountCreationParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountDTO>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).create(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Supply an account JWT access token and receive all profile data stored by Hands In
         * @summary Retrieve account profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountDTO>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).getProfile(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Supply an account JWT access token and retrieve the all the applications that are connected to this account
         * @summary List connected account applications
         * @param {string} [appName] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplications(appName?: string, pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AccountApp>>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).listApplications(appName, pageNum, pageSize, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Supply an account JWT access token and delete the associated profile from it
         * @summary Delete an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AccountsApiFp(configuration)._delete(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Hands In account by supplying the necessary details
         * @summary Create an account
         * @param {AccountCreationParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body: AccountCreationParams, options?: AxiosRequestConfig): Promise<AxiosResponse<AccountDTO>> {
            return AccountsApiFp(configuration).create(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Supply an account JWT access token and receive all profile data stored by Hands In
         * @summary Retrieve account profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<AxiosResponse<AccountDTO>> {
            return AccountsApiFp(configuration).getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Supply an account JWT access token and retrieve the all the applications that are connected to this account
         * @summary List connected account applications
         * @param {string} [appName] 
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplications(appName?: string, pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AccountApp>>> {
            return AccountsApiFp(configuration).listApplications(appName, pageNum, pageSize, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Supply an account JWT access token and delete the associated profile from it
     * @summary Delete an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async _delete(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AccountsApiFp(this.configuration)._delete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Hands In account by supplying the necessary details
     * @summary Create an account
     * @param {AccountCreationParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async create(body: AccountCreationParams, options?: AxiosRequestConfig) : Promise<AxiosResponse<AccountDTO>> {
        return AccountsApiFp(this.configuration).create(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Supply an account JWT access token and receive all profile data stored by Hands In
     * @summary Retrieve account profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async getProfile(options?: AxiosRequestConfig) : Promise<AxiosResponse<AccountDTO>> {
        return AccountsApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Supply an account JWT access token and retrieve the all the applications that are connected to this account
     * @summary List connected account applications
     * @param {string} [appName] 
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async listApplications(appName?: string, pageNum?: number, pageSize?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AccountApp>>> {
        return AccountsApiFp(this.configuration).listApplications(appName, pageNum, pageSize, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
