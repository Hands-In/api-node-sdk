/**
 * Merchant API
 * The Hands In API is the first and only service that enables users to transact within a group. Our API is heavily orientated around being a RESTful service  that has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, ant utilizes standard HTTP response codes
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AccountsApi", () => {
  let instance: api.AccountsApi
  beforeEach(function() {
    instance = new api.AccountsApi(config)
  });

  test("_delete", () => {
    return expect(instance._delete({})).resolves.toBe(null)
  })
  test("create", () => {
    const body: api.AccountCreationParams = undefined
    return expect(instance.create(body, {})).resolves.toBe(null)
  })
  test("getProfile", () => {
    return expect(instance.getProfile({})).resolves.toBe(null)
  })
  test("listApplications", () => {
    const appName: string = "appName_example"
    const pageNum: number = 1.2
    const pageSize: number = 1.2
    const limit: number = 1.2
    return expect(instance.listApplications(appName, pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
})

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("login", () => {
    const body: api.LoginParams = undefined
    return expect(instance.login(body, {})).resolves.toBe(null)
  })
  test("requestPasswordReset", () => {
    const body: api.RequestResetParams = undefined
    return expect(instance.requestPasswordReset(body, {})).resolves.toBe(null)
  })
  test("resetPassword", () => {
    const body: api.PasswordResetParams = undefined
    const resetToken: string = "resetToken_example"
    return expect(instance.resetPassword(body, resetToken, {})).resolves.toBe(null)
  })
})

describe("CheckoutsApi", () => {
  let instance: api.CheckoutsApi
  beforeEach(function() {
    instance = new api.CheckoutsApi(config)
  });

  test("createCheckout", () => {
    const body: api.CheckoutSessionCreationParams = undefined
    return expect(instance.createCheckout(body, {})).resolves.toBe(null)
  })
  test("getCheckout", () => {
    const checkoutId: string = "checkoutId_example"
    return expect(instance.getCheckout(checkoutId, {})).resolves.toBe(null)
  })
  test("listCheckouts", () => {
    const pageNum: number = 1.2
    const pageSize: number = 1.2
    const limit: number = 1.2
    return expect(instance.listCheckouts(pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
  test("updateCheckout", () => {
    const body: api.CheckoutSessionCreationParams = undefined
    const checkoutId: string = "checkoutId_example"
    return expect(instance.updateCheckout(body, checkoutId, {})).resolves.toBe(null)
  })
})

describe("CustomersApi", () => {
  let instance: api.CustomersApi
  beforeEach(function() {
    instance = new api.CustomersApi(config)
  });

  test("createCustomer", () => {
    const body: api.CustomerCreationParams = undefined
    return expect(instance.createCustomer(body, {})).resolves.toBe(null)
  })
  test("deleteCustomer", () => {
    const customerId: string = "customerId_example"
    return expect(instance.deleteCustomer(customerId, {})).resolves.toBe(null)
  })
  test("getCustomer", () => {
    const customerId: string = "customerId_example"
    return expect(instance.getCustomer(customerId, {})).resolves.toBe(null)
  })
})

describe("EmailsApi", () => {
  let instance: api.EmailsApi
  beforeEach(function() {
    instance = new api.EmailsApi(config)
  });

  test("getEmail", () => {
    const emailId: string = "emailId_example"
    return expect(instance.getEmail(emailId, {})).resolves.toBe(null)
  })
  test("listEmails", () => {
    const pageNum: number = 1.2
    const pageSize: number = 1.2
    const limit: number = 1.2
    return expect(instance.listEmails(pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
  test("sendEmail", () => {
    const body: api.EmailCreationParams = undefined
    return expect(instance.sendEmail(body, {})).resolves.toBe(null)
  })
})

describe("GroupPaymentsApi", () => {
  let instance: api.GroupPaymentsApi
  beforeEach(function() {
    instance = new api.GroupPaymentsApi(config)
  });

  test("cancelGroupPayment", () => {
    const body: api.GroupPaymentIdCancelBody = undefined
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.cancelGroupPayment(body, groupPaymentId, {})).resolves.toBe(null)
  })
  test("createGroupPayment", () => {
    const body: api.CreateGroupPaymentRequest = undefined
    return expect(instance.createGroupPayment(body, {})).resolves.toBe(null)
  })
  test("getGroupPayment", () => {
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.getGroupPayment(groupPaymentId, {})).resolves.toBe(null)
  })
  test("getGroupPaymentRefunds", () => {
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.getGroupPaymentRefunds(groupPaymentId, {})).resolves.toBe(null)
  })
  test("joinGroupPayment", () => {
    const body: api.JoinGroupPaymentRequest = undefined
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.joinGroupPayment(body, groupPaymentId, {})).resolves.toBe(null)
  })
  test("kickGroupPayment", () => {
    const body: api.KickGroupPaymentRequest = undefined
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.kickGroupPayment(body, groupPaymentId, {})).resolves.toBe(null)
  })
  test("leaveGroupPayment", () => {
    const body: api.LeaveGroupPaymentRequest = undefined
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.leaveGroupPayment(body, groupPaymentId, {})).resolves.toBe(null)
  })
  test("listGroupPayments", () => {
    const pageNum: ModelInteger = undefined
    const pageSize: ModelInteger = undefined
    const limit: ModelInteger = undefined
    return expect(instance.listGroupPayments(pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
  test("payInto", () => {
    const body: api.PayIntoGroupPaymentRequest = undefined
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.payInto(body, groupPaymentId, {})).resolves.toBe(null)
  })
  test("refundGroupPayment", () => {
    const body: api.GroupPaymentRefundRequest = undefined
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.refundGroupPayment(body, groupPaymentId, {})).resolves.toBe(null)
  })
  test("updateGroupPayment", () => {
    const body: api.GroupPaymentUpdateParams = undefined
    const groupPaymentId: string = "groupPaymentId_example"
    return expect(instance.updateGroupPayment(body, groupPaymentId, {})).resolves.toBe(null)
  })
})

describe("ItemsApi", () => {
  let instance: api.ItemsApi
  beforeEach(function() {
    instance = new api.ItemsApi(config)
  });

  test("createItem", () => {
    const body: api.ItemCreationParams = undefined
    return expect(instance.createItem(body, {})).resolves.toBe(null)
  })
  test("deleteItem", () => {
    const itemId: string = "itemId_example"
    return expect(instance.deleteItem(itemId, {})).resolves.toBe(null)
  })
  test("getItem", () => {
    const itemId: string = "itemId_example"
    return expect(instance.getItem(itemId, {})).resolves.toBe(null)
  })
  test("getItems", () => {
    const body: api.ItemListParams = undefined
    return expect(instance.getItems(body, {})).resolves.toBe(null)
  })
  test("listItems", () => {
    const pageNum: number = 1.2
    const pageSize: number = 1.2
    const limit: number = 1.2
    return expect(instance.listItems(pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
  test("updateItem", () => {
    const body: api.ItemUpdateParams = undefined
    const itemId: string = "itemId_example"
    return expect(instance.updateItem(body, itemId, {})).resolves.toBe(null)
  })
})

describe("MerchantApi", () => {
  let instance: api.MerchantApi
  beforeEach(function() {
    instance = new api.MerchantApi(config)
  });

  test("createMerchant", () => {
    const body: api.PickMerchantNameOrContactDetailsOrLogoUrlOrDefaultCurrency_ = undefined
    return expect(instance.createMerchant(body, {})).resolves.toBe(null)
  })
  test("deleteMerchant", () => {
    return expect(instance.deleteMerchant({})).resolves.toBe(null)
  })
  test("getMerchant", () => {
    return expect(instance.getMerchant({})).resolves.toBe(null)
  })
  test("inviteMerchant", () => {
    const body: api.MerchantIdInviteBody = undefined
    const merchantId: string = "merchantId_example"
    return expect(instance.inviteMerchant(body, merchantId, {})).resolves.toBe(null)
  })
  test("joinMerchant", () => {
    const merchantId: string = "merchantId_example"
    const key: string = "key_example"
    return expect(instance.joinMerchant(merchantId, key, {})).resolves.toBe(null)
  })
  test("loginMerchant", () => {
    const merchantId: string = "merchantId_example"
    return expect(instance.loginMerchant(merchantId, {})).resolves.toBe(null)
  })
  test("sendEmailMerchant", () => {
    const body: api.EmailCreationParams = undefined
    return expect(instance.sendEmailMerchant(body, {})).resolves.toBe(null)
  })
})

describe("MerchantConnectApi", () => {
  let instance: api.MerchantConnectApi
  beforeEach(function() {
    instance = new api.MerchantConnectApi(config)
  });

  test("authoriseMerchantPaymentConnect", () => {
    const service: Service = undefined
    return expect(instance.authoriseMerchantPaymentConnect(service, {})).resolves.toBe(null)
  })
  test("getMerchantPaymentConnect", () => {
    const service: Service = undefined
    return expect(instance.getMerchantPaymentConnect(service, {})).resolves.toBe(null)
  })
  test("obtainMerchantPaymentConnect", () => {
    const service: Service = undefined
    const code: string = "code_example"
    const state: string = "state_example"
    return expect(instance.obtainMerchantPaymentConnect(service, code, state, {})).resolves.toBe(null)
  })
  test("renewMerchantPaymentConnect", () => {
    const service: Service = undefined
    return expect(instance.renewMerchantPaymentConnect(service, {})).resolves.toBe(null)
  })
  test("revokeMerchantPaymentConnect", () => {
    const service: Service = undefined
    return expect(instance.revokeMerchantPaymentConnect(service, {})).resolves.toBe(null)
  })
})

describe("OrdersApi", () => {
  let instance: api.OrdersApi
  beforeEach(function() {
    instance = new api.OrdersApi(config)
  });

  test("createOrder", () => {
    const body: api.OrderCreationParams = undefined
    return expect(instance.createOrder(body, {})).resolves.toBe(null)
  })
  test("getOrder", () => {
    const orderId: string = "orderId_example"
    return expect(instance.getOrder(orderId, {})).resolves.toBe(null)
  })
  test("listOrders", () => {
    const pageNum: ModelInteger = undefined
    const pageSize: ModelInteger = undefined
    const limit: ModelInteger = undefined
    return expect(instance.listOrders(pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
  test("updateOrder", () => {
    const body: api.PartialOrderCreationParams_ = undefined
    const orderId: string = "orderId_example"
    return expect(instance.updateOrder(body, orderId, {})).resolves.toBe(null)
  })
})

describe("PaymentsApi", () => {
  let instance: api.PaymentsApi
  beforeEach(function() {
    instance = new api.PaymentsApi(config)
  });

  test("cancelPayment", () => {
    const paymentId: string = "paymentId_example"
    return expect(instance.cancelPayment(paymentId, {})).resolves.toBe(null)
  })
  test("createPayment", () => {
    const body: api.CreatePaymentRequest = undefined
    return expect(instance.createPayment(body, {})).resolves.toBe(null)
  })
  test("getPayment", () => {
    const paymentId: string = "paymentId_example"
    return expect(instance.getPayment(paymentId, {})).resolves.toBe(null)
  })
  test("getPaymentRefunds", () => {
    const paymentId: string = "paymentId_example"
    return expect(instance.getPaymentRefunds(paymentId, {})).resolves.toBe(null)
  })
  test("listPayments", () => {
    const pageNum: ModelInteger = undefined
    const pageSize: ModelInteger = undefined
    const limit: ModelInteger = undefined
    return expect(instance.listPayments(pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
  test("refundPayment", () => {
    const body: api.PaymentRefundRequest = undefined
    const paymentId: string = "paymentId_example"
    return expect(instance.refundPayment(body, paymentId, {})).resolves.toBe(null)
  })
})

describe("RefundsApi", () => {
  let instance: api.RefundsApi
  beforeEach(function() {
    instance = new api.RefundsApi(config)
  });

  test("getRefund", () => {
    const refundId: string = "refundId_example"
    return expect(instance.getRefund(refundId, {})).resolves.toBe(null)
  })
  test("listRefunds", () => {
    const pageNum: ModelInteger = undefined
    const pageSize: ModelInteger = undefined
    const limit: ModelInteger = undefined
    return expect(instance.listRefunds(pageNum, pageSize, limit, {})).resolves.toBe(null)
  })
})

